=begin
#Etsy Open API v3

#<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/issues/new/choose\">please add an issue in Github</a>.</p></div>&copy; 2021-2022 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

The version of the OpenAPI document: 3.0.0
Contact: developers@etsy.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module EtsyApi
  class ShopListingVariationImageApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notification-03 wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/issues/new/choose\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Gets all variation images on a listing.
    # @param shop_id [Integer] The unique positive non-zero numeric ID for an Etsy Shop.
    # @param listing_id [Integer] The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
    # @param [Hash] opts the optional parameters
    # @return [ListingVariationImages]
    def get_listing_variation_images(shop_id, listing_id, opts = {})
      data, _status_code, _headers = get_listing_variation_images_with_http_info(shop_id, listing_id, opts)
      data
    end

    # &lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;span class&#x3D;\&quot;wt-badge wt-badge--notification-03 wt-bg-slime-tint wt-mr-xs-2\&quot;&gt;General Release&lt;/span&gt;&lt;a class&#x3D;\&quot;wt-text-link\&quot; href&#x3D;\&quot;https://github.com/etsy/open-api/issues/new/choose\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;Report bug&lt;/a&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;p class&#x3D;\&quot;wt-text-body-01 banner-text\&quot;&gt;This endpoint is ready for production use.&lt;/p&gt;&lt;/div&gt;  Gets all variation images on a listing.
    # @param shop_id [Integer] The unique positive non-zero numeric ID for an Etsy Shop.
    # @param listing_id [Integer] The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListingVariationImages, Integer, Hash)>] ListingVariationImages data, response status code and response headers
    def get_listing_variation_images_with_http_info(shop_id, listing_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShopListingVariationImageApi.get_listing_variation_images ...'
      end
      # verify the required parameter 'shop_id' is set
      if @api_client.config.client_side_validation && shop_id.nil?
        fail ArgumentError, "Missing the required parameter 'shop_id' when calling ShopListingVariationImageApi.get_listing_variation_images"
      end
      if @api_client.config.client_side_validation && shop_id < 1
        fail ArgumentError, 'invalid value for "shop_id" when calling ShopListingVariationImageApi.get_listing_variation_images, must be greater than or equal to 1.'
      end

      # verify the required parameter 'listing_id' is set
      if @api_client.config.client_side_validation && listing_id.nil?
        fail ArgumentError, "Missing the required parameter 'listing_id' when calling ShopListingVariationImageApi.get_listing_variation_images"
      end
      if @api_client.config.client_side_validation && listing_id < 1
        fail ArgumentError, 'invalid value for "listing_id" when calling ShopListingVariationImageApi.get_listing_variation_images, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/v3/application/shops/{shop_id}/listings/{listing_id}/variation-images'.sub('{' + 'shop_id' + '}', CGI.escape(shop_id.to_s)).sub('{' + 'listing_id' + '}', CGI.escape(listing_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListingVariationImages'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"ShopListingVariationImageApi.get_listing_variation_images",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShopListingVariationImageApi#get_listing_variation_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notification-03 wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/issues/new/choose\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Creates variation images on a listing. `variation_images` is an array with inputs for the `property_id`, `value_id`, and `image_id` fields. `image_ids` are associated with a `ListingImage` on the listing associated with the provided `listing_id`. `property_id` and `value_id` pairs are associated with a `ListingProduct` on the listing associated with the provided `listing_id`. `variation_images` should not contain any duplicates. `variation_images` does not contain more than one `property_id` as variation images can only be associated on one property. The update overwrites all existing variation images on a listing, so if your request is successful, the variation images on the listing will be exactly those you specify. 
    # @param shop_id [Integer] The unique positive non-zero numeric ID for an Etsy Shop.
    # @param listing_id [Integer] The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateVariationImagesRequest] :update_variation_images_request 
    # @return [ListingVariationImages]
    def update_variation_images(shop_id, listing_id, opts = {})
      data, _status_code, _headers = update_variation_images_with_http_info(shop_id, listing_id, opts)
      data
    end

    # &lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;span class&#x3D;\&quot;wt-badge wt-badge--notification-03 wt-bg-slime-tint wt-mr-xs-2\&quot;&gt;General Release&lt;/span&gt;&lt;a class&#x3D;\&quot;wt-text-link\&quot; href&#x3D;\&quot;https://github.com/etsy/open-api/issues/new/choose\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;Report bug&lt;/a&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\&quot;&gt;&lt;p class&#x3D;\&quot;wt-text-body-01 banner-text\&quot;&gt;This endpoint is ready for production use.&lt;/p&gt;&lt;/div&gt;  Creates variation images on a listing. &#x60;variation_images&#x60; is an array with inputs for the &#x60;property_id&#x60;, &#x60;value_id&#x60;, and &#x60;image_id&#x60; fields. &#x60;image_ids&#x60; are associated with a &#x60;ListingImage&#x60; on the listing associated with the provided &#x60;listing_id&#x60;. &#x60;property_id&#x60; and &#x60;value_id&#x60; pairs are associated with a &#x60;ListingProduct&#x60; on the listing associated with the provided &#x60;listing_id&#x60;. &#x60;variation_images&#x60; should not contain any duplicates. &#x60;variation_images&#x60; does not contain more than one &#x60;property_id&#x60; as variation images can only be associated on one property. The update overwrites all existing variation images on a listing, so if your request is successful, the variation images on the listing will be exactly those you specify. 
    # @param shop_id [Integer] The unique positive non-zero numeric ID for an Etsy Shop.
    # @param listing_id [Integer] The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateVariationImagesRequest] :update_variation_images_request 
    # @return [Array<(ListingVariationImages, Integer, Hash)>] ListingVariationImages data, response status code and response headers
    def update_variation_images_with_http_info(shop_id, listing_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShopListingVariationImageApi.update_variation_images ...'
      end
      # verify the required parameter 'shop_id' is set
      if @api_client.config.client_side_validation && shop_id.nil?
        fail ArgumentError, "Missing the required parameter 'shop_id' when calling ShopListingVariationImageApi.update_variation_images"
      end
      if @api_client.config.client_side_validation && shop_id < 1
        fail ArgumentError, 'invalid value for "shop_id" when calling ShopListingVariationImageApi.update_variation_images, must be greater than or equal to 1.'
      end

      # verify the required parameter 'listing_id' is set
      if @api_client.config.client_side_validation && listing_id.nil?
        fail ArgumentError, "Missing the required parameter 'listing_id' when calling ShopListingVariationImageApi.update_variation_images"
      end
      if @api_client.config.client_side_validation && listing_id < 1
        fail ArgumentError, 'invalid value for "listing_id" when calling ShopListingVariationImageApi.update_variation_images, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/v3/application/shops/{shop_id}/listings/{listing_id}/variation-images'.sub('{' + 'shop_id' + '}', CGI.escape(shop_id.to_s)).sub('{' + 'listing_id' + '}', CGI.escape(listing_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_variation_images_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ListingVariationImages'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ShopListingVariationImageApi.update_variation_images",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShopListingVariationImageApi#update_variation_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
