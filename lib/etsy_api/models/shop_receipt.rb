=begin
#Etsy Open API v3

#<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/issues/new/choose\">please add an issue in Github</a>.</p></div>&copy; 2021-2022 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

The version of the OpenAPI document: 3.0.0
Contact: developers@etsy.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module EtsyApi
  # The record of a purchase from a shop. Shop receipts display monetary values using the shop's currency.
  class ShopReceipt
    # The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.
    attr_accessor :receipt_id

    # The numeric value for the Etsy channel that serviced the purchase: 0 for Etsy.com, 1 for a Pattern shop.
    attr_accessor :receipt_type

    # The numeric ID for the [user](/documentation/reference#tag/User) (seller) fulfilling the purchase.
    attr_accessor :seller_user_id

    # The email address string for the seller of the listing.
    attr_accessor :seller_email

    # The numeric ID for the [user](/documentation/reference#tag/User) making the purchase.
    attr_accessor :buyer_user_id

    # The email address string for the buyer of the listing.
    attr_accessor :buyer_email

    # The name string for the recipient in the shipping address.
    attr_accessor :name

    # The first address line string for the recipient in the shipping address.
    attr_accessor :first_line

    # The optional second address line string for the recipient in the shipping address.
    attr_accessor :second_line

    # The city string for the recipient in the shipping address.
    attr_accessor :city

    # The state string for the recipient in the shipping address.
    attr_accessor :state

    # The zip code string (not necessarily a number) for the recipient in the shipping address.
    attr_accessor :zip

    # The current order status string. One of: `paid`, `completed`, `open`, `payment processing` or `canceled`.
    attr_accessor :status

    # The formatted shipping address string for the recipient in the shipping address.
    attr_accessor :formatted_address

    # The ISO-3166 alpha-2 country code string for the recipient in the shipping address.
    attr_accessor :country_iso

    # The payment method string identifying purchaser's payment method, which must be one of: \\'cc\\' (credit card), \\'paypal\\', \\'check\\', \\'mo\\' (money order), \\'bt\\' (bank transfer), \\'other\\', \\'ideal\\', \\'sofort\\', \\'apple_pay\\', \\'google\\', \\'android_pay\\', \\'google_pay\\', \\'klarna\\', \\'k_pay_in_4\\' (klarna), \\'k_pay_in_3\\' (klarna), or \\'k_financing\\' (klarna).
    attr_accessor :payment_method

    # The email address string for the email address to which to send payment confirmation
    attr_accessor :payment_email

    # An optional message string from the seller.
    attr_accessor :message_from_seller

    # An optional message string from the buyer.
    attr_accessor :message_from_buyer

    # The machine-generated acknowledgement string from the payment system.
    attr_accessor :message_from_payment

    # When true, buyer paid for this purchase.
    attr_accessor :is_paid

    # When true, seller shipped the products.
    attr_accessor :is_shipped

    # The receipt\\'s creation time, in epoch seconds.
    attr_accessor :create_timestamp

    # The receipt\\'s creation time, in epoch seconds.
    attr_accessor :created_timestamp

    # The time of the last update to the receipt, in epoch seconds.
    attr_accessor :update_timestamp

    # The time of the last update to the receipt, in epoch seconds.
    attr_accessor :updated_timestamp

    # When true, the buyer indicated this purchase is a gift.
    attr_accessor :is_gift

    # A gift message string the buyer requests delivered with the product.
    attr_accessor :gift_message

    attr_accessor :grandtotal

    attr_accessor :subtotal

    attr_accessor :total_price

    attr_accessor :total_shipping_cost

    attr_accessor :total_tax_cost

    attr_accessor :total_vat_cost

    attr_accessor :discount_amt

    attr_accessor :gift_wrap_price

    # A list of shipment statements for this receipt.
    attr_accessor :shipments

    # Array of transactions for the receipt.
    attr_accessor :transactions

    # Refunds for a given receipt.
    attr_accessor :refunds

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'receipt_id' => :'receipt_id',
        :'receipt_type' => :'receipt_type',
        :'seller_user_id' => :'seller_user_id',
        :'seller_email' => :'seller_email',
        :'buyer_user_id' => :'buyer_user_id',
        :'buyer_email' => :'buyer_email',
        :'name' => :'name',
        :'first_line' => :'first_line',
        :'second_line' => :'second_line',
        :'city' => :'city',
        :'state' => :'state',
        :'zip' => :'zip',
        :'status' => :'status',
        :'formatted_address' => :'formatted_address',
        :'country_iso' => :'country_iso',
        :'payment_method' => :'payment_method',
        :'payment_email' => :'payment_email',
        :'message_from_seller' => :'message_from_seller',
        :'message_from_buyer' => :'message_from_buyer',
        :'message_from_payment' => :'message_from_payment',
        :'is_paid' => :'is_paid',
        :'is_shipped' => :'is_shipped',
        :'create_timestamp' => :'create_timestamp',
        :'created_timestamp' => :'created_timestamp',
        :'update_timestamp' => :'update_timestamp',
        :'updated_timestamp' => :'updated_timestamp',
        :'is_gift' => :'is_gift',
        :'gift_message' => :'gift_message',
        :'grandtotal' => :'grandtotal',
        :'subtotal' => :'subtotal',
        :'total_price' => :'total_price',
        :'total_shipping_cost' => :'total_shipping_cost',
        :'total_tax_cost' => :'total_tax_cost',
        :'total_vat_cost' => :'total_vat_cost',
        :'discount_amt' => :'discount_amt',
        :'gift_wrap_price' => :'gift_wrap_price',
        :'shipments' => :'shipments',
        :'transactions' => :'transactions',
        :'refunds' => :'refunds'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'receipt_id' => :'Integer',
        :'receipt_type' => :'Integer',
        :'seller_user_id' => :'Integer',
        :'seller_email' => :'String',
        :'buyer_user_id' => :'Integer',
        :'buyer_email' => :'String',
        :'name' => :'String',
        :'first_line' => :'String',
        :'second_line' => :'String',
        :'city' => :'String',
        :'state' => :'String',
        :'zip' => :'String',
        :'status' => :'String',
        :'formatted_address' => :'String',
        :'country_iso' => :'String',
        :'payment_method' => :'String',
        :'payment_email' => :'String',
        :'message_from_seller' => :'String',
        :'message_from_buyer' => :'String',
        :'message_from_payment' => :'String',
        :'is_paid' => :'Boolean',
        :'is_shipped' => :'Boolean',
        :'create_timestamp' => :'Integer',
        :'created_timestamp' => :'Integer',
        :'update_timestamp' => :'Integer',
        :'updated_timestamp' => :'Integer',
        :'is_gift' => :'Boolean',
        :'gift_message' => :'String',
        :'grandtotal' => :'ShopReceiptGrandtotal',
        :'subtotal' => :'ShopReceiptSubtotal',
        :'total_price' => :'ShopReceiptTotalPrice',
        :'total_shipping_cost' => :'ShopReceiptTotalShippingCost',
        :'total_tax_cost' => :'ShopReceiptTotalTaxCost',
        :'total_vat_cost' => :'ShopReceiptTotalVatCost',
        :'discount_amt' => :'ShopReceiptDiscountAmt',
        :'gift_wrap_price' => :'ShopReceiptGiftWrapPrice',
        :'shipments' => :'Array<ShopReceiptShipmentsInner>',
        :'transactions' => :'Array<ShopReceiptTransactionsInner>',
        :'refunds' => :'Array<ShopReceiptRefundsInner>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'seller_email',
        :'buyer_email',
        :'second_line',
        :'state',
        :'message_from_seller',
        :'message_from_buyer',
        :'message_from_payment',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `EtsyApi::ShopReceipt` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `EtsyApi::ShopReceipt`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'receipt_id')
        self.receipt_id = attributes[:'receipt_id']
      end

      if attributes.key?(:'receipt_type')
        self.receipt_type = attributes[:'receipt_type']
      end

      if attributes.key?(:'seller_user_id')
        self.seller_user_id = attributes[:'seller_user_id']
      end

      if attributes.key?(:'seller_email')
        self.seller_email = attributes[:'seller_email']
      end

      if attributes.key?(:'buyer_user_id')
        self.buyer_user_id = attributes[:'buyer_user_id']
      end

      if attributes.key?(:'buyer_email')
        self.buyer_email = attributes[:'buyer_email']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'first_line')
        self.first_line = attributes[:'first_line']
      end

      if attributes.key?(:'second_line')
        self.second_line = attributes[:'second_line']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'zip')
        self.zip = attributes[:'zip']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'formatted_address')
        self.formatted_address = attributes[:'formatted_address']
      end

      if attributes.key?(:'country_iso')
        self.country_iso = attributes[:'country_iso']
      end

      if attributes.key?(:'payment_method')
        self.payment_method = attributes[:'payment_method']
      end

      if attributes.key?(:'payment_email')
        self.payment_email = attributes[:'payment_email']
      end

      if attributes.key?(:'message_from_seller')
        self.message_from_seller = attributes[:'message_from_seller']
      end

      if attributes.key?(:'message_from_buyer')
        self.message_from_buyer = attributes[:'message_from_buyer']
      end

      if attributes.key?(:'message_from_payment')
        self.message_from_payment = attributes[:'message_from_payment']
      end

      if attributes.key?(:'is_paid')
        self.is_paid = attributes[:'is_paid']
      end

      if attributes.key?(:'is_shipped')
        self.is_shipped = attributes[:'is_shipped']
      end

      if attributes.key?(:'create_timestamp')
        self.create_timestamp = attributes[:'create_timestamp']
      end

      if attributes.key?(:'created_timestamp')
        self.created_timestamp = attributes[:'created_timestamp']
      end

      if attributes.key?(:'update_timestamp')
        self.update_timestamp = attributes[:'update_timestamp']
      end

      if attributes.key?(:'updated_timestamp')
        self.updated_timestamp = attributes[:'updated_timestamp']
      end

      if attributes.key?(:'is_gift')
        self.is_gift = attributes[:'is_gift']
      end

      if attributes.key?(:'gift_message')
        self.gift_message = attributes[:'gift_message']
      end

      if attributes.key?(:'grandtotal')
        self.grandtotal = attributes[:'grandtotal']
      end

      if attributes.key?(:'subtotal')
        self.subtotal = attributes[:'subtotal']
      end

      if attributes.key?(:'total_price')
        self.total_price = attributes[:'total_price']
      end

      if attributes.key?(:'total_shipping_cost')
        self.total_shipping_cost = attributes[:'total_shipping_cost']
      end

      if attributes.key?(:'total_tax_cost')
        self.total_tax_cost = attributes[:'total_tax_cost']
      end

      if attributes.key?(:'total_vat_cost')
        self.total_vat_cost = attributes[:'total_vat_cost']
      end

      if attributes.key?(:'discount_amt')
        self.discount_amt = attributes[:'discount_amt']
      end

      if attributes.key?(:'gift_wrap_price')
        self.gift_wrap_price = attributes[:'gift_wrap_price']
      end

      if attributes.key?(:'shipments')
        if (value = attributes[:'shipments']).is_a?(Array)
          self.shipments = value
        end
      end

      if attributes.key?(:'transactions')
        if (value = attributes[:'transactions']).is_a?(Array)
          self.transactions = value
        end
      end

      if attributes.key?(:'refunds')
        if (value = attributes[:'refunds']).is_a?(Array)
          self.refunds = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@receipt_id.nil? && @receipt_id < 1
        invalid_properties.push('invalid value for "receipt_id", must be greater than or equal to 1.')
      end

      if !@receipt_type.nil? && @receipt_type < 0
        invalid_properties.push('invalid value for "receipt_type", must be greater than or equal to 0.')
      end

      if !@seller_user_id.nil? && @seller_user_id < 1
        invalid_properties.push('invalid value for "seller_user_id", must be greater than or equal to 1.')
      end

      if !@buyer_user_id.nil? && @buyer_user_id < 1
        invalid_properties.push('invalid value for "buyer_user_id", must be greater than or equal to 1.')
      end

      if !@create_timestamp.nil? && @create_timestamp < 946684800
        invalid_properties.push('invalid value for "create_timestamp", must be greater than or equal to 946684800.')
      end

      if !@created_timestamp.nil? && @created_timestamp < 946684800
        invalid_properties.push('invalid value for "created_timestamp", must be greater than or equal to 946684800.')
      end

      if !@update_timestamp.nil? && @update_timestamp < 946684800
        invalid_properties.push('invalid value for "update_timestamp", must be greater than or equal to 946684800.')
      end

      if !@updated_timestamp.nil? && @updated_timestamp < 946684800
        invalid_properties.push('invalid value for "updated_timestamp", must be greater than or equal to 946684800.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@receipt_id.nil? && @receipt_id < 1
      return false if !@receipt_type.nil? && @receipt_type < 0
      return false if !@seller_user_id.nil? && @seller_user_id < 1
      return false if !@buyer_user_id.nil? && @buyer_user_id < 1
      status_validator = EnumAttributeValidator.new('String', ["paid", "completed", "open", "payment processing", "canceled"])
      return false unless status_validator.valid?(@status)
      return false if !@create_timestamp.nil? && @create_timestamp < 946684800
      return false if !@created_timestamp.nil? && @created_timestamp < 946684800
      return false if !@update_timestamp.nil? && @update_timestamp < 946684800
      return false if !@updated_timestamp.nil? && @updated_timestamp < 946684800
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_id Value to be assigned
    def receipt_id=(receipt_id)
      if !receipt_id.nil? && receipt_id < 1
        fail ArgumentError, 'invalid value for "receipt_id", must be greater than or equal to 1.'
      end

      @receipt_id = receipt_id
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_type Value to be assigned
    def receipt_type=(receipt_type)
      if !receipt_type.nil? && receipt_type < 0
        fail ArgumentError, 'invalid value for "receipt_type", must be greater than or equal to 0.'
      end

      @receipt_type = receipt_type
    end

    # Custom attribute writer method with validation
    # @param [Object] seller_user_id Value to be assigned
    def seller_user_id=(seller_user_id)
      if !seller_user_id.nil? && seller_user_id < 1
        fail ArgumentError, 'invalid value for "seller_user_id", must be greater than or equal to 1.'
      end

      @seller_user_id = seller_user_id
    end

    # Custom attribute writer method with validation
    # @param [Object] buyer_user_id Value to be assigned
    def buyer_user_id=(buyer_user_id)
      if !buyer_user_id.nil? && buyer_user_id < 1
        fail ArgumentError, 'invalid value for "buyer_user_id", must be greater than or equal to 1.'
      end

      @buyer_user_id = buyer_user_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["paid", "completed", "open", "payment processing", "canceled"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] create_timestamp Value to be assigned
    def create_timestamp=(create_timestamp)
      if !create_timestamp.nil? && create_timestamp < 946684800
        fail ArgumentError, 'invalid value for "create_timestamp", must be greater than or equal to 946684800.'
      end

      @create_timestamp = create_timestamp
    end

    # Custom attribute writer method with validation
    # @param [Object] created_timestamp Value to be assigned
    def created_timestamp=(created_timestamp)
      if !created_timestamp.nil? && created_timestamp < 946684800
        fail ArgumentError, 'invalid value for "created_timestamp", must be greater than or equal to 946684800.'
      end

      @created_timestamp = created_timestamp
    end

    # Custom attribute writer method with validation
    # @param [Object] update_timestamp Value to be assigned
    def update_timestamp=(update_timestamp)
      if !update_timestamp.nil? && update_timestamp < 946684800
        fail ArgumentError, 'invalid value for "update_timestamp", must be greater than or equal to 946684800.'
      end

      @update_timestamp = update_timestamp
    end

    # Custom attribute writer method with validation
    # @param [Object] updated_timestamp Value to be assigned
    def updated_timestamp=(updated_timestamp)
      if !updated_timestamp.nil? && updated_timestamp < 946684800
        fail ArgumentError, 'invalid value for "updated_timestamp", must be greater than or equal to 946684800.'
      end

      @updated_timestamp = updated_timestamp
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          receipt_id == o.receipt_id &&
          receipt_type == o.receipt_type &&
          seller_user_id == o.seller_user_id &&
          seller_email == o.seller_email &&
          buyer_user_id == o.buyer_user_id &&
          buyer_email == o.buyer_email &&
          name == o.name &&
          first_line == o.first_line &&
          second_line == o.second_line &&
          city == o.city &&
          state == o.state &&
          zip == o.zip &&
          status == o.status &&
          formatted_address == o.formatted_address &&
          country_iso == o.country_iso &&
          payment_method == o.payment_method &&
          payment_email == o.payment_email &&
          message_from_seller == o.message_from_seller &&
          message_from_buyer == o.message_from_buyer &&
          message_from_payment == o.message_from_payment &&
          is_paid == o.is_paid &&
          is_shipped == o.is_shipped &&
          create_timestamp == o.create_timestamp &&
          created_timestamp == o.created_timestamp &&
          update_timestamp == o.update_timestamp &&
          updated_timestamp == o.updated_timestamp &&
          is_gift == o.is_gift &&
          gift_message == o.gift_message &&
          grandtotal == o.grandtotal &&
          subtotal == o.subtotal &&
          total_price == o.total_price &&
          total_shipping_cost == o.total_shipping_cost &&
          total_tax_cost == o.total_tax_cost &&
          total_vat_cost == o.total_vat_cost &&
          discount_amt == o.discount_amt &&
          gift_wrap_price == o.gift_wrap_price &&
          shipments == o.shipments &&
          transactions == o.transactions &&
          refunds == o.refunds
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [receipt_id, receipt_type, seller_user_id, seller_email, buyer_user_id, buyer_email, name, first_line, second_line, city, state, zip, status, formatted_address, country_iso, payment_method, payment_email, message_from_seller, message_from_buyer, message_from_payment, is_paid, is_shipped, create_timestamp, created_timestamp, update_timestamp, updated_timestamp, is_gift, gift_message, grandtotal, subtotal, total_price, total_shipping_cost, total_tax_cost, total_vat_cost, discount_amt, gift_wrap_price, shipments, transactions, refunds].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = EtsyApi.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
