=begin
#Etsy Open API v3

#<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/issues/new/choose\">please add an issue in Github</a>.</p></div>&copy; 2021-2022 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

The version of the OpenAPI document: 3.0.0
Contact: developers@etsy.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module EtsyApi
  # Represents a profile used to set a listing's shipping information. Please note that it's not possible to create calculated shipping templates via the API. However, you can associate calculated shipping profiles created from Shop Manager with listings using the API.
  class ShopShippingProfile
    # The numeric ID of the shipping profile.
    attr_accessor :shipping_profile_id

    # The name string of this shipping profile.
    attr_accessor :title

    # The numeric ID for the [user](/documentation/reference#tag/User) who owns the shipping profile.
    attr_accessor :user_id

    # The minimum number of days for processing the listing.
    attr_accessor :min_processing_days

    # The maximum number of days for processing the listing.
    attr_accessor :max_processing_days

    # Translated display label string for processing days.
    attr_accessor :processing_days_display_label

    # The ISO code of the country from which the listing ships.
    attr_accessor :origin_country_iso

    # When true, someone deleted this shipping profile.
    attr_accessor :is_deleted

    # A list of [shipping profile destinations](/documentation/reference/#operation/createShopShippingProfileDestination) available for this shipping profile.
    attr_accessor :shipping_profile_destinations

    # A list of [shipping profile upgrades](/documentation/reference/#operation/createShopShippingProfileUpgrade) available for this shipping profile.
    attr_accessor :shipping_profile_upgrades

    # The postal code string (not necessarily a number) for the location from which the listing ships. Required if the `origin_country_iso` is `US` or `CA`.
    attr_accessor :origin_postal_code

    attr_accessor :profile_type

    # The domestic handling fee added to buyer's shipping total - only available for calculated shipping profiles.
    attr_accessor :domestic_handling_fee

    # The international handling fee added to buyer's shipping total - only available for calculated shipping profiles.
    attr_accessor :international_handling_fee

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'shipping_profile_id' => :'shipping_profile_id',
        :'title' => :'title',
        :'user_id' => :'user_id',
        :'min_processing_days' => :'min_processing_days',
        :'max_processing_days' => :'max_processing_days',
        :'processing_days_display_label' => :'processing_days_display_label',
        :'origin_country_iso' => :'origin_country_iso',
        :'is_deleted' => :'is_deleted',
        :'shipping_profile_destinations' => :'shipping_profile_destinations',
        :'shipping_profile_upgrades' => :'shipping_profile_upgrades',
        :'origin_postal_code' => :'origin_postal_code',
        :'profile_type' => :'profile_type',
        :'domestic_handling_fee' => :'domestic_handling_fee',
        :'international_handling_fee' => :'international_handling_fee'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'shipping_profile_id' => :'Integer',
        :'title' => :'String',
        :'user_id' => :'Integer',
        :'min_processing_days' => :'Integer',
        :'max_processing_days' => :'Integer',
        :'processing_days_display_label' => :'String',
        :'origin_country_iso' => :'String',
        :'is_deleted' => :'Boolean',
        :'shipping_profile_destinations' => :'Array<ShopShippingProfileShippingProfileDestinationsInner>',
        :'shipping_profile_upgrades' => :'Array<ShopShippingProfileShippingProfileUpgradesInner>',
        :'origin_postal_code' => :'String',
        :'profile_type' => :'String',
        :'domestic_handling_fee' => :'Float',
        :'international_handling_fee' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'title',
        :'min_processing_days',
        :'max_processing_days',
        :'origin_postal_code',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `EtsyApi::ShopShippingProfile` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `EtsyApi::ShopShippingProfile`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'shipping_profile_id')
        self.shipping_profile_id = attributes[:'shipping_profile_id']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'min_processing_days')
        self.min_processing_days = attributes[:'min_processing_days']
      end

      if attributes.key?(:'max_processing_days')
        self.max_processing_days = attributes[:'max_processing_days']
      end

      if attributes.key?(:'processing_days_display_label')
        self.processing_days_display_label = attributes[:'processing_days_display_label']
      end

      if attributes.key?(:'origin_country_iso')
        self.origin_country_iso = attributes[:'origin_country_iso']
      end

      if attributes.key?(:'is_deleted')
        self.is_deleted = attributes[:'is_deleted']
      end

      if attributes.key?(:'shipping_profile_destinations')
        if (value = attributes[:'shipping_profile_destinations']).is_a?(Array)
          self.shipping_profile_destinations = value
        end
      end

      if attributes.key?(:'shipping_profile_upgrades')
        if (value = attributes[:'shipping_profile_upgrades']).is_a?(Array)
          self.shipping_profile_upgrades = value
        end
      end

      if attributes.key?(:'origin_postal_code')
        self.origin_postal_code = attributes[:'origin_postal_code']
      end

      if attributes.key?(:'profile_type')
        self.profile_type = attributes[:'profile_type']
      end

      if attributes.key?(:'domestic_handling_fee')
        self.domestic_handling_fee = attributes[:'domestic_handling_fee']
      else
        self.domestic_handling_fee = 0
      end

      if attributes.key?(:'international_handling_fee')
        self.international_handling_fee = attributes[:'international_handling_fee']
      else
        self.international_handling_fee = 0
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@shipping_profile_id.nil? && @shipping_profile_id < 1
        invalid_properties.push('invalid value for "shipping_profile_id", must be greater than or equal to 1.')
      end

      if !@user_id.nil? && @user_id < 1
        invalid_properties.push('invalid value for "user_id", must be greater than or equal to 1.')
      end

      if !@min_processing_days.nil? && @min_processing_days < 0
        invalid_properties.push('invalid value for "min_processing_days", must be greater than or equal to 0.')
      end

      if !@max_processing_days.nil? && @max_processing_days < 0
        invalid_properties.push('invalid value for "max_processing_days", must be greater than or equal to 0.')
      end

      if !@domestic_handling_fee.nil? && @domestic_handling_fee < 0
        invalid_properties.push('invalid value for "domestic_handling_fee", must be greater than or equal to 0.')
      end

      if !@international_handling_fee.nil? && @international_handling_fee < 0
        invalid_properties.push('invalid value for "international_handling_fee", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@shipping_profile_id.nil? && @shipping_profile_id < 1
      return false if !@user_id.nil? && @user_id < 1
      return false if !@min_processing_days.nil? && @min_processing_days < 0
      return false if !@max_processing_days.nil? && @max_processing_days < 0
      profile_type_validator = EnumAttributeValidator.new('String', ["manual", "calculated"])
      return false unless profile_type_validator.valid?(@profile_type)
      return false if !@domestic_handling_fee.nil? && @domestic_handling_fee < 0
      return false if !@international_handling_fee.nil? && @international_handling_fee < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] shipping_profile_id Value to be assigned
    def shipping_profile_id=(shipping_profile_id)
      if !shipping_profile_id.nil? && shipping_profile_id < 1
        fail ArgumentError, 'invalid value for "shipping_profile_id", must be greater than or equal to 1.'
      end

      @shipping_profile_id = shipping_profile_id
    end

    # Custom attribute writer method with validation
    # @param [Object] user_id Value to be assigned
    def user_id=(user_id)
      if !user_id.nil? && user_id < 1
        fail ArgumentError, 'invalid value for "user_id", must be greater than or equal to 1.'
      end

      @user_id = user_id
    end

    # Custom attribute writer method with validation
    # @param [Object] min_processing_days Value to be assigned
    def min_processing_days=(min_processing_days)
      if !min_processing_days.nil? && min_processing_days < 0
        fail ArgumentError, 'invalid value for "min_processing_days", must be greater than or equal to 0.'
      end

      @min_processing_days = min_processing_days
    end

    # Custom attribute writer method with validation
    # @param [Object] max_processing_days Value to be assigned
    def max_processing_days=(max_processing_days)
      if !max_processing_days.nil? && max_processing_days < 0
        fail ArgumentError, 'invalid value for "max_processing_days", must be greater than or equal to 0.'
      end

      @max_processing_days = max_processing_days
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] profile_type Object to be assigned
    def profile_type=(profile_type)
      validator = EnumAttributeValidator.new('String', ["manual", "calculated"])
      unless validator.valid?(profile_type)
        fail ArgumentError, "invalid value for \"profile_type\", must be one of #{validator.allowable_values}."
      end
      @profile_type = profile_type
    end

    # Custom attribute writer method with validation
    # @param [Object] domestic_handling_fee Value to be assigned
    def domestic_handling_fee=(domestic_handling_fee)
      if !domestic_handling_fee.nil? && domestic_handling_fee < 0
        fail ArgumentError, 'invalid value for "domestic_handling_fee", must be greater than or equal to 0.'
      end

      @domestic_handling_fee = domestic_handling_fee
    end

    # Custom attribute writer method with validation
    # @param [Object] international_handling_fee Value to be assigned
    def international_handling_fee=(international_handling_fee)
      if !international_handling_fee.nil? && international_handling_fee < 0
        fail ArgumentError, 'invalid value for "international_handling_fee", must be greater than or equal to 0.'
      end

      @international_handling_fee = international_handling_fee
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          shipping_profile_id == o.shipping_profile_id &&
          title == o.title &&
          user_id == o.user_id &&
          min_processing_days == o.min_processing_days &&
          max_processing_days == o.max_processing_days &&
          processing_days_display_label == o.processing_days_display_label &&
          origin_country_iso == o.origin_country_iso &&
          is_deleted == o.is_deleted &&
          shipping_profile_destinations == o.shipping_profile_destinations &&
          shipping_profile_upgrades == o.shipping_profile_upgrades &&
          origin_postal_code == o.origin_postal_code &&
          profile_type == o.profile_type &&
          domestic_handling_fee == o.domestic_handling_fee &&
          international_handling_fee == o.international_handling_fee
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [shipping_profile_id, title, user_id, min_processing_days, max_processing_days, processing_days_display_label, origin_country_iso, is_deleted, shipping_profile_destinations, shipping_profile_upgrades, origin_postal_code, profile_type, domestic_handling_fee, international_handling_fee].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = EtsyApi.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
