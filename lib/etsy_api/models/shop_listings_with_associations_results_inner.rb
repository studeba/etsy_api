=begin
#Etsy Open API v3

#<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/issues/new/choose\">please add an issue in Github</a>.</p></div>&copy; 2021-2022 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

The version of the OpenAPI document: 3.0.0
Contact: developers@etsy.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module EtsyApi
  # The ShopListing resources found.
  class ShopListingsWithAssociationsResultsInner
    # The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
    attr_accessor :listing_id

    # The numeric ID for the [user](/documentation/reference#tag/User) posting the listing.
    attr_accessor :user_id

    # The unique positive non-zero numeric ID for an Etsy Shop.
    attr_accessor :shop_id

    # The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.
    attr_accessor :title

    # A description string of the product for sale in the listing.
    attr_accessor :description

    # When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.
    attr_accessor :state

    # The listing\\'s creation time, in epoch seconds.
    attr_accessor :creation_timestamp

    # The listing\\'s creation time, in epoch seconds.
    attr_accessor :created_timestamp

    # The listing\\'s expiration time, in epoch seconds.
    attr_accessor :ending_timestamp

    # The listing\\'s creation time, in epoch seconds.
    attr_accessor :original_creation_timestamp

    # The time of the last update to the listing, in epoch seconds.
    attr_accessor :last_modified_timestamp

    # The time of the last update to the listing, in epoch seconds.
    attr_accessor :updated_timestamp

    # The date and time of the last state change of this listing.
    attr_accessor :state_timestamp

    # The positive non-zero number of products available for purchase in the listing. Note: The listing quantity is the sum of available offering quantities. You can request the quantities for individual offerings from the ListingInventory resource using the [getListingInventory](/documentation/reference#operation/getListingInventory) endpoint.
    attr_accessor :quantity

    # The numeric ID of a section in a specific Etsy shop.
    attr_accessor :shop_section_id

    # The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.
    attr_accessor :featured_rank

    # The full URL to the listing's page on Etsy.
    attr_accessor :url

    # The number of users who marked this Listing a favorite.
    attr_accessor :num_favorers

    # When true, applicable [shop](/documentation/reference#tag/Shop) tax rates do not apply to this listing at checkout.
    attr_accessor :non_taxable

    # When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.
    attr_accessor :is_taxable

    # When true, a buyer may contact the seller for a customized order. The default value is true when a shop accepts custom orders. Does not apply to shops that do not accept custom orders.
    attr_accessor :is_customizable

    # When true, this listing is personalizable. The default value is null.
    attr_accessor :is_personalizable

    # When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
    attr_accessor :personalization_is_required

    # This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.
    attr_accessor :personalization_char_count_max

    # When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
    attr_accessor :personalization_instructions

    # An enumerated type string that indicates whether the listing is physical or a digital download.
    attr_accessor :listing_type

    # A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.
    attr_accessor :tags

    # A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.
    attr_accessor :materials

    # The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
    attr_accessor :shipping_profile_id

    # The numeric ID of the Return Policy.
    attr_accessor :return_policy_id

    # The minimum number of days required to process this listing. Default value is null.
    attr_accessor :processing_min

    # The maximum number of days required to process this listing. Default value is null.
    attr_accessor :processing_max

    # An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.
    attr_accessor :who_made

    # An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.
    attr_accessor :when_made

    # When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.
    attr_accessor :is_supply

    # The numeric weight of the product measured in units set in \\'item_weight_unit\\'. Default value is null. If set, the value must be greater than 0.
    attr_accessor :item_weight

    # A string defining the units used to measure the weight of the product. Default value is null.
    attr_accessor :item_weight_unit

    # The numeric length of the product measured in units set in \\'item_dimensions_unit\\'. Default value is null. If set, the value must be greater than 0.
    attr_accessor :item_length

    # The numeric width of the product measured in units set in \\'item_dimensions_unit\\'. Default value is null. If set, the value must be greater than 0.
    attr_accessor :item_width

    # The numeric length of the product measured in units set in \\'item_dimensions_unit\\'. Default value is null. If set, the value must be greater than 0.
    attr_accessor :item_height

    # A string defining the units used to measure the dimensions of the product. Default value is null.
    attr_accessor :item_dimensions_unit

    # When true, this is a private listing intended for a specific buyer and hidden from shop view.
    attr_accessor :is_private

    # An array of style strings for this listing, each of which is free-form text string such as \\\"Formal\\\", or \\\"Steampunk\\\". When creating or updating a listing, the listing may have up to two styles. Valid style strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.
    attr_accessor :style

    # A string describing the files attached to a digital listing.
    attr_accessor :file_data

    # When true, the listing has variations.
    attr_accessor :has_variations

    # When true, renews a listing for four months upon expiration.
    attr_accessor :should_auto_renew

    # The IETF language tag for the default language of the listing. Ex: `de`, `en`, `es`, `fr`, `it`, `ja`, `nl`, `pl`, `pt`, `ru`.
    attr_accessor :language

    attr_accessor :price

    # The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.
    attr_accessor :taxonomy_id

    attr_accessor :shipping_profile

    attr_accessor :user

    attr_accessor :shop

    # Represents a list of listing image resources, each of which contains the reference URLs and metadata for an image
    attr_accessor :images

    # The single video associated with a listing.
    attr_accessor :videos

    attr_accessor :inventory

    # Represents a list of production partners for a shop.
    attr_accessor :production_partners

    # A list of SKU strings for the listing. SKUs will only appear if the requesting user owns the shop and a valid matching OAuth 2 token is provided. When requested without the token it will be an empty array.
    attr_accessor :skus

    # An array of translations for the listing. Default value is an empty array.
    attr_accessor :translations

    # The number of times the listing has been viewed. This value is tabulated once per day and **only for active listings**, so the value is not real-time. If `0`, the listing has either not been viewed, not yet tabulated, was not active during the last tabulation or there was an error fetching the value. If a value is expected, call `getListing` to confirm the value.
    attr_accessor :views

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'listing_id' => :'listing_id',
        :'user_id' => :'user_id',
        :'shop_id' => :'shop_id',
        :'title' => :'title',
        :'description' => :'description',
        :'state' => :'state',
        :'creation_timestamp' => :'creation_timestamp',
        :'created_timestamp' => :'created_timestamp',
        :'ending_timestamp' => :'ending_timestamp',
        :'original_creation_timestamp' => :'original_creation_timestamp',
        :'last_modified_timestamp' => :'last_modified_timestamp',
        :'updated_timestamp' => :'updated_timestamp',
        :'state_timestamp' => :'state_timestamp',
        :'quantity' => :'quantity',
        :'shop_section_id' => :'shop_section_id',
        :'featured_rank' => :'featured_rank',
        :'url' => :'url',
        :'num_favorers' => :'num_favorers',
        :'non_taxable' => :'non_taxable',
        :'is_taxable' => :'is_taxable',
        :'is_customizable' => :'is_customizable',
        :'is_personalizable' => :'is_personalizable',
        :'personalization_is_required' => :'personalization_is_required',
        :'personalization_char_count_max' => :'personalization_char_count_max',
        :'personalization_instructions' => :'personalization_instructions',
        :'listing_type' => :'listing_type',
        :'tags' => :'tags',
        :'materials' => :'materials',
        :'shipping_profile_id' => :'shipping_profile_id',
        :'return_policy_id' => :'return_policy_id',
        :'processing_min' => :'processing_min',
        :'processing_max' => :'processing_max',
        :'who_made' => :'who_made',
        :'when_made' => :'when_made',
        :'is_supply' => :'is_supply',
        :'item_weight' => :'item_weight',
        :'item_weight_unit' => :'item_weight_unit',
        :'item_length' => :'item_length',
        :'item_width' => :'item_width',
        :'item_height' => :'item_height',
        :'item_dimensions_unit' => :'item_dimensions_unit',
        :'is_private' => :'is_private',
        :'style' => :'style',
        :'file_data' => :'file_data',
        :'has_variations' => :'has_variations',
        :'should_auto_renew' => :'should_auto_renew',
        :'language' => :'language',
        :'price' => :'price',
        :'taxonomy_id' => :'taxonomy_id',
        :'shipping_profile' => :'shipping_profile',
        :'user' => :'user',
        :'shop' => :'shop',
        :'images' => :'images',
        :'videos' => :'videos',
        :'inventory' => :'inventory',
        :'production_partners' => :'production_partners',
        :'skus' => :'skus',
        :'translations' => :'translations',
        :'views' => :'views'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'listing_id' => :'Integer',
        :'user_id' => :'Integer',
        :'shop_id' => :'Integer',
        :'title' => :'String',
        :'description' => :'String',
        :'state' => :'String',
        :'creation_timestamp' => :'Integer',
        :'created_timestamp' => :'Integer',
        :'ending_timestamp' => :'Integer',
        :'original_creation_timestamp' => :'Integer',
        :'last_modified_timestamp' => :'Integer',
        :'updated_timestamp' => :'Integer',
        :'state_timestamp' => :'Integer',
        :'quantity' => :'Integer',
        :'shop_section_id' => :'Integer',
        :'featured_rank' => :'Integer',
        :'url' => :'String',
        :'num_favorers' => :'Integer',
        :'non_taxable' => :'Boolean',
        :'is_taxable' => :'Boolean',
        :'is_customizable' => :'Boolean',
        :'is_personalizable' => :'Boolean',
        :'personalization_is_required' => :'Boolean',
        :'personalization_char_count_max' => :'Integer',
        :'personalization_instructions' => :'String',
        :'listing_type' => :'String',
        :'tags' => :'Array<String>',
        :'materials' => :'Array<String>',
        :'shipping_profile_id' => :'Integer',
        :'return_policy_id' => :'Integer',
        :'processing_min' => :'Integer',
        :'processing_max' => :'Integer',
        :'who_made' => :'String',
        :'when_made' => :'String',
        :'is_supply' => :'Boolean',
        :'item_weight' => :'Float',
        :'item_weight_unit' => :'String',
        :'item_length' => :'Float',
        :'item_width' => :'Float',
        :'item_height' => :'Float',
        :'item_dimensions_unit' => :'String',
        :'is_private' => :'Boolean',
        :'style' => :'Array<String>',
        :'file_data' => :'String',
        :'has_variations' => :'Boolean',
        :'should_auto_renew' => :'Boolean',
        :'language' => :'String',
        :'price' => :'ShopListingPrice',
        :'taxonomy_id' => :'Integer',
        :'shipping_profile' => :'ShopListingWithAssociationsShippingProfile',
        :'user' => :'ShopListingWithAssociationsUser',
        :'shop' => :'ShopListingWithAssociationsShop',
        :'images' => :'Array<ShopListingWithAssociationsImagesInner>',
        :'videos' => :'Array<ShopListingWithAssociationsVideosInner>',
        :'inventory' => :'ShopListingWithAssociationsInventory',
        :'production_partners' => :'Array<ShopListingWithAssociationsProductionPartnersInner>',
        :'skus' => :'Array<String>',
        :'translations' => :'Array<ShopListingWithAssociationsTranslationsInner>',
        :'views' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'shop_section_id',
        :'personalization_char_count_max',
        :'personalization_instructions',
        :'shipping_profile_id',
        :'return_policy_id',
        :'processing_min',
        :'processing_max',
        :'who_made',
        :'when_made',
        :'is_supply',
        :'item_weight',
        :'item_weight_unit',
        :'item_length',
        :'item_width',
        :'item_height',
        :'item_dimensions_unit',
        :'language',
        :'taxonomy_id',
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'ShopListingWithAssociations'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `EtsyApi::ShopListingsWithAssociationsResultsInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `EtsyApi::ShopListingsWithAssociationsResultsInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'listing_id')
        self.listing_id = attributes[:'listing_id']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'shop_id')
        self.shop_id = attributes[:'shop_id']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'creation_timestamp')
        self.creation_timestamp = attributes[:'creation_timestamp']
      end

      if attributes.key?(:'created_timestamp')
        self.created_timestamp = attributes[:'created_timestamp']
      end

      if attributes.key?(:'ending_timestamp')
        self.ending_timestamp = attributes[:'ending_timestamp']
      end

      if attributes.key?(:'original_creation_timestamp')
        self.original_creation_timestamp = attributes[:'original_creation_timestamp']
      end

      if attributes.key?(:'last_modified_timestamp')
        self.last_modified_timestamp = attributes[:'last_modified_timestamp']
      end

      if attributes.key?(:'updated_timestamp')
        self.updated_timestamp = attributes[:'updated_timestamp']
      end

      if attributes.key?(:'state_timestamp')
        self.state_timestamp = attributes[:'state_timestamp']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'shop_section_id')
        self.shop_section_id = attributes[:'shop_section_id']
      end

      if attributes.key?(:'featured_rank')
        self.featured_rank = attributes[:'featured_rank']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'num_favorers')
        self.num_favorers = attributes[:'num_favorers']
      end

      if attributes.key?(:'non_taxable')
        self.non_taxable = attributes[:'non_taxable']
      end

      if attributes.key?(:'is_taxable')
        self.is_taxable = attributes[:'is_taxable']
      end

      if attributes.key?(:'is_customizable')
        self.is_customizable = attributes[:'is_customizable']
      end

      if attributes.key?(:'is_personalizable')
        self.is_personalizable = attributes[:'is_personalizable']
      end

      if attributes.key?(:'personalization_is_required')
        self.personalization_is_required = attributes[:'personalization_is_required']
      end

      if attributes.key?(:'personalization_char_count_max')
        self.personalization_char_count_max = attributes[:'personalization_char_count_max']
      end

      if attributes.key?(:'personalization_instructions')
        self.personalization_instructions = attributes[:'personalization_instructions']
      end

      if attributes.key?(:'listing_type')
        self.listing_type = attributes[:'listing_type']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'materials')
        if (value = attributes[:'materials']).is_a?(Array)
          self.materials = value
        end
      end

      if attributes.key?(:'shipping_profile_id')
        self.shipping_profile_id = attributes[:'shipping_profile_id']
      end

      if attributes.key?(:'return_policy_id')
        self.return_policy_id = attributes[:'return_policy_id']
      end

      if attributes.key?(:'processing_min')
        self.processing_min = attributes[:'processing_min']
      end

      if attributes.key?(:'processing_max')
        self.processing_max = attributes[:'processing_max']
      end

      if attributes.key?(:'who_made')
        self.who_made = attributes[:'who_made']
      end

      if attributes.key?(:'when_made')
        self.when_made = attributes[:'when_made']
      end

      if attributes.key?(:'is_supply')
        self.is_supply = attributes[:'is_supply']
      end

      if attributes.key?(:'item_weight')
        self.item_weight = attributes[:'item_weight']
      end

      if attributes.key?(:'item_weight_unit')
        self.item_weight_unit = attributes[:'item_weight_unit']
      end

      if attributes.key?(:'item_length')
        self.item_length = attributes[:'item_length']
      end

      if attributes.key?(:'item_width')
        self.item_width = attributes[:'item_width']
      end

      if attributes.key?(:'item_height')
        self.item_height = attributes[:'item_height']
      end

      if attributes.key?(:'item_dimensions_unit')
        self.item_dimensions_unit = attributes[:'item_dimensions_unit']
      end

      if attributes.key?(:'is_private')
        self.is_private = attributes[:'is_private']
      end

      if attributes.key?(:'style')
        if (value = attributes[:'style']).is_a?(Array)
          self.style = value
        end
      end

      if attributes.key?(:'file_data')
        self.file_data = attributes[:'file_data']
      end

      if attributes.key?(:'has_variations')
        self.has_variations = attributes[:'has_variations']
      end

      if attributes.key?(:'should_auto_renew')
        self.should_auto_renew = attributes[:'should_auto_renew']
      end

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'taxonomy_id')
        self.taxonomy_id = attributes[:'taxonomy_id']
      end

      if attributes.key?(:'shipping_profile')
        self.shipping_profile = attributes[:'shipping_profile']
      end

      if attributes.key?(:'user')
        self.user = attributes[:'user']
      end

      if attributes.key?(:'shop')
        self.shop = attributes[:'shop']
      end

      if attributes.key?(:'images')
        if (value = attributes[:'images']).is_a?(Array)
          self.images = value
        end
      end

      if attributes.key?(:'videos')
        if (value = attributes[:'videos']).is_a?(Array)
          self.videos = value
        end
      end

      if attributes.key?(:'inventory')
        self.inventory = attributes[:'inventory']
      end

      if attributes.key?(:'production_partners')
        if (value = attributes[:'production_partners']).is_a?(Array)
          self.production_partners = value
        end
      end

      if attributes.key?(:'skus')
        if (value = attributes[:'skus']).is_a?(Array)
          self.skus = value
        end
      end

      if attributes.key?(:'translations')
        if (value = attributes[:'translations']).is_a?(Array)
          self.translations = value
        end
      end

      if attributes.key?(:'views')
        self.views = attributes[:'views']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@listing_id.nil? && @listing_id < 1
        invalid_properties.push('invalid value for "listing_id", must be greater than or equal to 1.')
      end

      if !@user_id.nil? && @user_id < 1
        invalid_properties.push('invalid value for "user_id", must be greater than or equal to 1.')
      end

      if !@shop_id.nil? && @shop_id < 1
        invalid_properties.push('invalid value for "shop_id", must be greater than or equal to 1.')
      end

      if !@creation_timestamp.nil? && @creation_timestamp < 946684800
        invalid_properties.push('invalid value for "creation_timestamp", must be greater than or equal to 946684800.')
      end

      if !@created_timestamp.nil? && @created_timestamp < 946684800
        invalid_properties.push('invalid value for "created_timestamp", must be greater than or equal to 946684800.')
      end

      if !@ending_timestamp.nil? && @ending_timestamp < 946684800
        invalid_properties.push('invalid value for "ending_timestamp", must be greater than or equal to 946684800.')
      end

      if !@original_creation_timestamp.nil? && @original_creation_timestamp < 946684800
        invalid_properties.push('invalid value for "original_creation_timestamp", must be greater than or equal to 946684800.')
      end

      if !@last_modified_timestamp.nil? && @last_modified_timestamp < 946684800
        invalid_properties.push('invalid value for "last_modified_timestamp", must be greater than or equal to 946684800.')
      end

      if !@updated_timestamp.nil? && @updated_timestamp < 946684800
        invalid_properties.push('invalid value for "updated_timestamp", must be greater than or equal to 946684800.')
      end

      if !@state_timestamp.nil? && @state_timestamp < 946684800
        invalid_properties.push('invalid value for "state_timestamp", must be greater than or equal to 946684800.')
      end

      if !@quantity.nil? && @quantity < 0
        invalid_properties.push('invalid value for "quantity", must be greater than or equal to 0.')
      end

      if !@shop_section_id.nil? && @shop_section_id < 1
        invalid_properties.push('invalid value for "shop_section_id", must be greater than or equal to 1.')
      end

      if !@num_favorers.nil? && @num_favorers < 0
        invalid_properties.push('invalid value for "num_favorers", must be greater than or equal to 0.')
      end

      if !@shipping_profile_id.nil? && @shipping_profile_id < 1
        invalid_properties.push('invalid value for "shipping_profile_id", must be greater than or equal to 1.')
      end

      if !@return_policy_id.nil? && @return_policy_id < 1
        invalid_properties.push('invalid value for "return_policy_id", must be greater than or equal to 1.')
      end

      if !@processing_min.nil? && @processing_min < 0
        invalid_properties.push('invalid value for "processing_min", must be greater than or equal to 0.')
      end

      if !@processing_max.nil? && @processing_max < 0
        invalid_properties.push('invalid value for "processing_max", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@listing_id.nil? && @listing_id < 1
      return false if !@user_id.nil? && @user_id < 1
      return false if !@shop_id.nil? && @shop_id < 1
      state_validator = EnumAttributeValidator.new('String', ["active", "inactive", "sold_out", "draft", "expired"])
      return false unless state_validator.valid?(@state)
      return false if !@creation_timestamp.nil? && @creation_timestamp < 946684800
      return false if !@created_timestamp.nil? && @created_timestamp < 946684800
      return false if !@ending_timestamp.nil? && @ending_timestamp < 946684800
      return false if !@original_creation_timestamp.nil? && @original_creation_timestamp < 946684800
      return false if !@last_modified_timestamp.nil? && @last_modified_timestamp < 946684800
      return false if !@updated_timestamp.nil? && @updated_timestamp < 946684800
      return false if !@state_timestamp.nil? && @state_timestamp < 946684800
      return false if !@quantity.nil? && @quantity < 0
      return false if !@shop_section_id.nil? && @shop_section_id < 1
      return false if !@num_favorers.nil? && @num_favorers < 0
      listing_type_validator = EnumAttributeValidator.new('String', ["physical", "download", "both"])
      return false unless listing_type_validator.valid?(@listing_type)
      return false if !@shipping_profile_id.nil? && @shipping_profile_id < 1
      return false if !@return_policy_id.nil? && @return_policy_id < 1
      return false if !@processing_min.nil? && @processing_min < 0
      return false if !@processing_max.nil? && @processing_max < 0
      who_made_validator = EnumAttributeValidator.new('String', ["i_did", "someone_else", "collective"])
      return false unless who_made_validator.valid?(@who_made)
      when_made_validator = EnumAttributeValidator.new('String', ["made_to_order", "2020_2022", "2010_2019", "2003_2009", "before_2003", "2000_2002", "1990s", "1980s", "1970s", "1960s", "1950s", "1940s", "1930s", "1920s", "1910s", "1900s", "1800s", "1700s", "before_1700"])
      return false unless when_made_validator.valid?(@when_made)
      item_weight_unit_validator = EnumAttributeValidator.new('String', ["oz", "lb", "g", "kg"])
      return false unless item_weight_unit_validator.valid?(@item_weight_unit)
      item_dimensions_unit_validator = EnumAttributeValidator.new('String', ["in", "ft", "mm", "cm", "m", "yd", "inches"])
      return false unless item_dimensions_unit_validator.valid?(@item_dimensions_unit)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] listing_id Value to be assigned
    def listing_id=(listing_id)
      if !listing_id.nil? && listing_id < 1
        fail ArgumentError, 'invalid value for "listing_id", must be greater than or equal to 1.'
      end

      @listing_id = listing_id
    end

    # Custom attribute writer method with validation
    # @param [Object] user_id Value to be assigned
    def user_id=(user_id)
      if !user_id.nil? && user_id < 1
        fail ArgumentError, 'invalid value for "user_id", must be greater than or equal to 1.'
      end

      @user_id = user_id
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_id Value to be assigned
    def shop_id=(shop_id)
      if !shop_id.nil? && shop_id < 1
        fail ArgumentError, 'invalid value for "shop_id", must be greater than or equal to 1.'
      end

      @shop_id = shop_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["active", "inactive", "sold_out", "draft", "expired"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] creation_timestamp Value to be assigned
    def creation_timestamp=(creation_timestamp)
      if !creation_timestamp.nil? && creation_timestamp < 946684800
        fail ArgumentError, 'invalid value for "creation_timestamp", must be greater than or equal to 946684800.'
      end

      @creation_timestamp = creation_timestamp
    end

    # Custom attribute writer method with validation
    # @param [Object] created_timestamp Value to be assigned
    def created_timestamp=(created_timestamp)
      if !created_timestamp.nil? && created_timestamp < 946684800
        fail ArgumentError, 'invalid value for "created_timestamp", must be greater than or equal to 946684800.'
      end

      @created_timestamp = created_timestamp
    end

    # Custom attribute writer method with validation
    # @param [Object] ending_timestamp Value to be assigned
    def ending_timestamp=(ending_timestamp)
      if !ending_timestamp.nil? && ending_timestamp < 946684800
        fail ArgumentError, 'invalid value for "ending_timestamp", must be greater than or equal to 946684800.'
      end

      @ending_timestamp = ending_timestamp
    end

    # Custom attribute writer method with validation
    # @param [Object] original_creation_timestamp Value to be assigned
    def original_creation_timestamp=(original_creation_timestamp)
      if !original_creation_timestamp.nil? && original_creation_timestamp < 946684800
        fail ArgumentError, 'invalid value for "original_creation_timestamp", must be greater than or equal to 946684800.'
      end

      @original_creation_timestamp = original_creation_timestamp
    end

    # Custom attribute writer method with validation
    # @param [Object] last_modified_timestamp Value to be assigned
    def last_modified_timestamp=(last_modified_timestamp)
      if !last_modified_timestamp.nil? && last_modified_timestamp < 946684800
        fail ArgumentError, 'invalid value for "last_modified_timestamp", must be greater than or equal to 946684800.'
      end

      @last_modified_timestamp = last_modified_timestamp
    end

    # Custom attribute writer method with validation
    # @param [Object] updated_timestamp Value to be assigned
    def updated_timestamp=(updated_timestamp)
      if !updated_timestamp.nil? && updated_timestamp < 946684800
        fail ArgumentError, 'invalid value for "updated_timestamp", must be greater than or equal to 946684800.'
      end

      @updated_timestamp = updated_timestamp
    end

    # Custom attribute writer method with validation
    # @param [Object] state_timestamp Value to be assigned
    def state_timestamp=(state_timestamp)
      if !state_timestamp.nil? && state_timestamp < 946684800
        fail ArgumentError, 'invalid value for "state_timestamp", must be greater than or equal to 946684800.'
      end

      @state_timestamp = state_timestamp
    end

    # Custom attribute writer method with validation
    # @param [Object] quantity Value to be assigned
    def quantity=(quantity)
      if !quantity.nil? && quantity < 0
        fail ArgumentError, 'invalid value for "quantity", must be greater than or equal to 0.'
      end

      @quantity = quantity
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_section_id Value to be assigned
    def shop_section_id=(shop_section_id)
      if !shop_section_id.nil? && shop_section_id < 1
        fail ArgumentError, 'invalid value for "shop_section_id", must be greater than or equal to 1.'
      end

      @shop_section_id = shop_section_id
    end

    # Custom attribute writer method with validation
    # @param [Object] num_favorers Value to be assigned
    def num_favorers=(num_favorers)
      if !num_favorers.nil? && num_favorers < 0
        fail ArgumentError, 'invalid value for "num_favorers", must be greater than or equal to 0.'
      end

      @num_favorers = num_favorers
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] listing_type Object to be assigned
    def listing_type=(listing_type)
      validator = EnumAttributeValidator.new('String', ["physical", "download", "both"])
      unless validator.valid?(listing_type)
        fail ArgumentError, "invalid value for \"listing_type\", must be one of #{validator.allowable_values}."
      end
      @listing_type = listing_type
    end

    # Custom attribute writer method with validation
    # @param [Object] shipping_profile_id Value to be assigned
    def shipping_profile_id=(shipping_profile_id)
      if !shipping_profile_id.nil? && shipping_profile_id < 1
        fail ArgumentError, 'invalid value for "shipping_profile_id", must be greater than or equal to 1.'
      end

      @shipping_profile_id = shipping_profile_id
    end

    # Custom attribute writer method with validation
    # @param [Object] return_policy_id Value to be assigned
    def return_policy_id=(return_policy_id)
      if !return_policy_id.nil? && return_policy_id < 1
        fail ArgumentError, 'invalid value for "return_policy_id", must be greater than or equal to 1.'
      end

      @return_policy_id = return_policy_id
    end

    # Custom attribute writer method with validation
    # @param [Object] processing_min Value to be assigned
    def processing_min=(processing_min)
      if !processing_min.nil? && processing_min < 0
        fail ArgumentError, 'invalid value for "processing_min", must be greater than or equal to 0.'
      end

      @processing_min = processing_min
    end

    # Custom attribute writer method with validation
    # @param [Object] processing_max Value to be assigned
    def processing_max=(processing_max)
      if !processing_max.nil? && processing_max < 0
        fail ArgumentError, 'invalid value for "processing_max", must be greater than or equal to 0.'
      end

      @processing_max = processing_max
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] who_made Object to be assigned
    def who_made=(who_made)
      validator = EnumAttributeValidator.new('String', ["i_did", "someone_else", "collective"])
      unless validator.valid?(who_made)
        fail ArgumentError, "invalid value for \"who_made\", must be one of #{validator.allowable_values}."
      end
      @who_made = who_made
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] when_made Object to be assigned
    def when_made=(when_made)
      validator = EnumAttributeValidator.new('String', ["made_to_order", "2020_2022", "2010_2019", "2003_2009", "before_2003", "2000_2002", "1990s", "1980s", "1970s", "1960s", "1950s", "1940s", "1930s", "1920s", "1910s", "1900s", "1800s", "1700s", "before_1700"])
      unless validator.valid?(when_made.downcase)
        fail ArgumentError, "invalid value for \"when_made\", must be one of #{validator.allowable_values}."
      end
      @when_made = when_made
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] item_weight_unit Object to be assigned
    def item_weight_unit=(item_weight_unit)
      validator = EnumAttributeValidator.new('String', ["oz", "lb", "g", "kg"])
      unless validator.valid?(item_weight_unit)
        fail ArgumentError, "invalid value for \"item_weight_unit\", must be one of #{validator.allowable_values}."
      end
      @item_weight_unit = item_weight_unit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] item_dimensions_unit Object to be assigned
    def item_dimensions_unit=(item_dimensions_unit)
      validator = EnumAttributeValidator.new('String', ["in", "ft", "mm", "cm", "m", "yd", "inches"])
      unless validator.valid?(item_dimensions_unit)
        fail ArgumentError, "invalid value for \"item_dimensions_unit\", must be one of #{validator.allowable_values}."
      end
      @item_dimensions_unit = item_dimensions_unit
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          listing_id == o.listing_id &&
          user_id == o.user_id &&
          shop_id == o.shop_id &&
          title == o.title &&
          description == o.description &&
          state == o.state &&
          creation_timestamp == o.creation_timestamp &&
          created_timestamp == o.created_timestamp &&
          ending_timestamp == o.ending_timestamp &&
          original_creation_timestamp == o.original_creation_timestamp &&
          last_modified_timestamp == o.last_modified_timestamp &&
          updated_timestamp == o.updated_timestamp &&
          state_timestamp == o.state_timestamp &&
          quantity == o.quantity &&
          shop_section_id == o.shop_section_id &&
          featured_rank == o.featured_rank &&
          url == o.url &&
          num_favorers == o.num_favorers &&
          non_taxable == o.non_taxable &&
          is_taxable == o.is_taxable &&
          is_customizable == o.is_customizable &&
          is_personalizable == o.is_personalizable &&
          personalization_is_required == o.personalization_is_required &&
          personalization_char_count_max == o.personalization_char_count_max &&
          personalization_instructions == o.personalization_instructions &&
          listing_type == o.listing_type &&
          tags == o.tags &&
          materials == o.materials &&
          shipping_profile_id == o.shipping_profile_id &&
          return_policy_id == o.return_policy_id &&
          processing_min == o.processing_min &&
          processing_max == o.processing_max &&
          who_made == o.who_made &&
          when_made == o.when_made &&
          is_supply == o.is_supply &&
          item_weight == o.item_weight &&
          item_weight_unit == o.item_weight_unit &&
          item_length == o.item_length &&
          item_width == o.item_width &&
          item_height == o.item_height &&
          item_dimensions_unit == o.item_dimensions_unit &&
          is_private == o.is_private &&
          style == o.style &&
          file_data == o.file_data &&
          has_variations == o.has_variations &&
          should_auto_renew == o.should_auto_renew &&
          language == o.language &&
          price == o.price &&
          taxonomy_id == o.taxonomy_id &&
          shipping_profile == o.shipping_profile &&
          user == o.user &&
          shop == o.shop &&
          images == o.images &&
          videos == o.videos &&
          inventory == o.inventory &&
          production_partners == o.production_partners &&
          skus == o.skus &&
          translations == o.translations &&
          views == o.views
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [listing_id, user_id, shop_id, title, description, state, creation_timestamp, created_timestamp, ending_timestamp, original_creation_timestamp, last_modified_timestamp, updated_timestamp, state_timestamp, quantity, shop_section_id, featured_rank, url, num_favorers, non_taxable, is_taxable, is_customizable, is_personalizable, personalization_is_required, personalization_char_count_max, personalization_instructions, listing_type, tags, materials, shipping_profile_id, return_policy_id, processing_min, processing_max, who_made, when_made, is_supply, item_weight, item_weight_unit, item_length, item_width, item_height, item_dimensions_unit, is_private, style, file_data, has_variations, should_auto_renew, language, price, taxonomy_id, shipping_profile, user, shop, images, videos, inventory, production_partners, skus, translations, views].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = EtsyApi.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
