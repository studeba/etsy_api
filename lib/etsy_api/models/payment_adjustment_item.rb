=begin
#Etsy Open API v3

#<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/issues/new/choose\">please add an issue in Github</a>.</p></div>&copy; 2021-2022 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

The version of the OpenAPI document: 3.0.0
Contact: developers@etsy.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module EtsyApi
  # A payemnt adjustment line item for a payment adjustment.
  class PaymentAdjustmentItem
    # The numeric ID for a payment adjustment.
    attr_accessor :payment_adjustment_id

    # Unique ID for the adjustment line item.
    attr_accessor :payment_adjustment_item_id

    # String indicating the type of adjustment for this line item.
    attr_accessor :adjustment_type

    # Integer value for the amount of the adjustment in original currency.
    attr_accessor :amount

    # Integer value for the amount of the adjustment in currency for the shop.
    attr_accessor :shop_amount

    # The unique numeric ID for a transaction.
    attr_accessor :transaction_id

    # Unique ID for the bill payment adjustment.
    attr_accessor :bill_payment_id

    # The transaction\\'s creation date and time, in epoch seconds.
    attr_accessor :created_timestamp

    # The update date and time the payment adjustment in epoch seconds.
    attr_accessor :updated_timestamp

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'payment_adjustment_id' => :'payment_adjustment_id',
        :'payment_adjustment_item_id' => :'payment_adjustment_item_id',
        :'adjustment_type' => :'adjustment_type',
        :'amount' => :'amount',
        :'shop_amount' => :'shop_amount',
        :'transaction_id' => :'transaction_id',
        :'bill_payment_id' => :'bill_payment_id',
        :'created_timestamp' => :'created_timestamp',
        :'updated_timestamp' => :'updated_timestamp'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'payment_adjustment_id' => :'Integer',
        :'payment_adjustment_item_id' => :'Integer',
        :'adjustment_type' => :'String',
        :'amount' => :'Integer',
        :'shop_amount' => :'Integer',
        :'transaction_id' => :'Integer',
        :'bill_payment_id' => :'Integer',
        :'created_timestamp' => :'Integer',
        :'updated_timestamp' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'adjustment_type',
        :'transaction_id',
        :'bill_payment_id',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `EtsyApi::PaymentAdjustmentItem` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `EtsyApi::PaymentAdjustmentItem`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'payment_adjustment_id')
        self.payment_adjustment_id = attributes[:'payment_adjustment_id']
      end

      if attributes.key?(:'payment_adjustment_item_id')
        self.payment_adjustment_item_id = attributes[:'payment_adjustment_item_id']
      end

      if attributes.key?(:'adjustment_type')
        self.adjustment_type = attributes[:'adjustment_type']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      else
        self.amount = 0
      end

      if attributes.key?(:'shop_amount')
        self.shop_amount = attributes[:'shop_amount']
      else
        self.shop_amount = 0
      end

      if attributes.key?(:'transaction_id')
        self.transaction_id = attributes[:'transaction_id']
      end

      if attributes.key?(:'bill_payment_id')
        self.bill_payment_id = attributes[:'bill_payment_id']
      end

      if attributes.key?(:'created_timestamp')
        self.created_timestamp = attributes[:'created_timestamp']
      end

      if attributes.key?(:'updated_timestamp')
        self.updated_timestamp = attributes[:'updated_timestamp']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@payment_adjustment_id.nil? && @payment_adjustment_id < 1
        invalid_properties.push('invalid value for "payment_adjustment_id", must be greater than or equal to 1.')
      end

      if !@payment_adjustment_item_id.nil? && @payment_adjustment_item_id < 1
        invalid_properties.push('invalid value for "payment_adjustment_item_id", must be greater than or equal to 1.')
      end

      if !@transaction_id.nil? && @transaction_id < 1
        invalid_properties.push('invalid value for "transaction_id", must be greater than or equal to 1.')
      end

      if !@bill_payment_id.nil? && @bill_payment_id < 1
        invalid_properties.push('invalid value for "bill_payment_id", must be greater than or equal to 1.')
      end

      if !@created_timestamp.nil? && @created_timestamp < 946684800
        invalid_properties.push('invalid value for "created_timestamp", must be greater than or equal to 946684800.')
      end

      if !@updated_timestamp.nil? && @updated_timestamp < 946684800
        invalid_properties.push('invalid value for "updated_timestamp", must be greater than or equal to 946684800.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@payment_adjustment_id.nil? && @payment_adjustment_id < 1
      return false if !@payment_adjustment_item_id.nil? && @payment_adjustment_item_id < 1
      return false if !@transaction_id.nil? && @transaction_id < 1
      return false if !@bill_payment_id.nil? && @bill_payment_id < 1
      return false if !@created_timestamp.nil? && @created_timestamp < 946684800
      return false if !@updated_timestamp.nil? && @updated_timestamp < 946684800
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_adjustment_id Value to be assigned
    def payment_adjustment_id=(payment_adjustment_id)
      if !payment_adjustment_id.nil? && payment_adjustment_id < 1
        fail ArgumentError, 'invalid value for "payment_adjustment_id", must be greater than or equal to 1.'
      end

      @payment_adjustment_id = payment_adjustment_id
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_adjustment_item_id Value to be assigned
    def payment_adjustment_item_id=(payment_adjustment_item_id)
      if !payment_adjustment_item_id.nil? && payment_adjustment_item_id < 1
        fail ArgumentError, 'invalid value for "payment_adjustment_item_id", must be greater than or equal to 1.'
      end

      @payment_adjustment_item_id = payment_adjustment_item_id
    end

    # Custom attribute writer method with validation
    # @param [Object] transaction_id Value to be assigned
    def transaction_id=(transaction_id)
      if !transaction_id.nil? && transaction_id < 1
        fail ArgumentError, 'invalid value for "transaction_id", must be greater than or equal to 1.'
      end

      @transaction_id = transaction_id
    end

    # Custom attribute writer method with validation
    # @param [Object] bill_payment_id Value to be assigned
    def bill_payment_id=(bill_payment_id)
      if !bill_payment_id.nil? && bill_payment_id < 1
        fail ArgumentError, 'invalid value for "bill_payment_id", must be greater than or equal to 1.'
      end

      @bill_payment_id = bill_payment_id
    end

    # Custom attribute writer method with validation
    # @param [Object] created_timestamp Value to be assigned
    def created_timestamp=(created_timestamp)
      if !created_timestamp.nil? && created_timestamp < 946684800
        fail ArgumentError, 'invalid value for "created_timestamp", must be greater than or equal to 946684800.'
      end

      @created_timestamp = created_timestamp
    end

    # Custom attribute writer method with validation
    # @param [Object] updated_timestamp Value to be assigned
    def updated_timestamp=(updated_timestamp)
      if !updated_timestamp.nil? && updated_timestamp < 946684800
        fail ArgumentError, 'invalid value for "updated_timestamp", must be greater than or equal to 946684800.'
      end

      @updated_timestamp = updated_timestamp
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          payment_adjustment_id == o.payment_adjustment_id &&
          payment_adjustment_item_id == o.payment_adjustment_item_id &&
          adjustment_type == o.adjustment_type &&
          amount == o.amount &&
          shop_amount == o.shop_amount &&
          transaction_id == o.transaction_id &&
          bill_payment_id == o.bill_payment_id &&
          created_timestamp == o.created_timestamp &&
          updated_timestamp == o.updated_timestamp
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [payment_adjustment_id, payment_adjustment_item_id, adjustment_type, amount, shop_amount, transaction_id, bill_payment_id, created_timestamp, updated_timestamp].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = EtsyApi.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
