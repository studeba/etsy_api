=begin
#Etsy Open API v3

#<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/issues/new/choose\">please add an issue in Github</a>.</p></div>&copy; 2021-2022 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

The version of the OpenAPI document: 3.0.0
Contact: developers@etsy.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module EtsyApi
  # A transaction object associated with a shop receipt. Etsy generates one transaction per listing purchased as recorded on the order receipt.
  class ShopReceiptTransaction
    # The unique numeric ID for a transaction.
    attr_accessor :transaction_id

    # The title string of the [listing](/documentation/reference#tag/ShopListing) purchased in this transaction.
    attr_accessor :title

    # The description string of the [listing](/documentation/reference#tag/ShopListing) purchased in this transaction.
    attr_accessor :description

    # The numeric user ID for the seller in this transaction.
    attr_accessor :seller_user_id

    # The numeric user ID for the buyer in this transaction.
    attr_accessor :buyer_user_id

    # The transaction\\'s creation date and time, in epoch seconds.
    attr_accessor :create_timestamp

    # The transaction\\'s creation date and time, in epoch seconds.
    attr_accessor :created_timestamp

    # The transaction\\'s paid date and time, in epoch seconds.
    attr_accessor :paid_timestamp

    # The transaction\\'s shipping date and time, in epoch seconds.
    attr_accessor :shipped_timestamp

    # The numeric quantity of products purchased in this transaction.
    attr_accessor :quantity

    # The numeric ID of the primary [listing image](/documentation/reference#tag/ShopListing-Image) for this transaction.
    attr_accessor :listing_image_id

    # The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.
    attr_accessor :receipt_id

    # When true, the transaction recorded the purchase of a digital listing.
    attr_accessor :is_digital

    # A string describing the files purchased in this transaction.
    attr_accessor :file_data

    # The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
    attr_accessor :listing_id

    # The type string for the transaction, usually \"listing\".
    attr_accessor :transaction_type

    # The numeric ID for a specific [product](/documentation/reference#tag/ShopListing-Product) purchased from a listing.
    attr_accessor :product_id

    # The SKU string for the product
    attr_accessor :sku

    attr_accessor :price

    attr_accessor :shipping_cost

    # Array of variations and personalizations the buyer chose.
    attr_accessor :variations

    # A list of property value entries for this product. Note: parenthesis characters (`(` and `)`) are not allowed.
    attr_accessor :product_data

    # The ID of the shipping profile selected for this listing.
    attr_accessor :shipping_profile_id

    # The minimum number of days for processing the listing.
    attr_accessor :min_processing_days

    # The maximum number of days for processing the listing.
    attr_accessor :max_processing_days

    # Name of the selected shipping method.
    attr_accessor :shipping_method

    # The name of the shipping upgrade selected for this listing. Default value is null.
    attr_accessor :shipping_upgrade

    # The date & time of the expected ship date, in epoch seconds.
    attr_accessor :expected_ship_date

    # The amount of the buyer coupon that was discounted in the shop's currency.
    attr_accessor :buyer_coupon

    # The amount of the shop coupon that was discounted in the shop's currency.
    attr_accessor :shop_coupon

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'transaction_id' => :'transaction_id',
        :'title' => :'title',
        :'description' => :'description',
        :'seller_user_id' => :'seller_user_id',
        :'buyer_user_id' => :'buyer_user_id',
        :'create_timestamp' => :'create_timestamp',
        :'created_timestamp' => :'created_timestamp',
        :'paid_timestamp' => :'paid_timestamp',
        :'shipped_timestamp' => :'shipped_timestamp',
        :'quantity' => :'quantity',
        :'listing_image_id' => :'listing_image_id',
        :'receipt_id' => :'receipt_id',
        :'is_digital' => :'is_digital',
        :'file_data' => :'file_data',
        :'listing_id' => :'listing_id',
        :'transaction_type' => :'transaction_type',
        :'product_id' => :'product_id',
        :'sku' => :'sku',
        :'price' => :'price',
        :'shipping_cost' => :'shipping_cost',
        :'variations' => :'variations',
        :'product_data' => :'product_data',
        :'shipping_profile_id' => :'shipping_profile_id',
        :'min_processing_days' => :'min_processing_days',
        :'max_processing_days' => :'max_processing_days',
        :'shipping_method' => :'shipping_method',
        :'shipping_upgrade' => :'shipping_upgrade',
        :'expected_ship_date' => :'expected_ship_date',
        :'buyer_coupon' => :'buyer_coupon',
        :'shop_coupon' => :'shop_coupon'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'transaction_id' => :'Integer',
        :'title' => :'String',
        :'description' => :'String',
        :'seller_user_id' => :'Integer',
        :'buyer_user_id' => :'Integer',
        :'create_timestamp' => :'Integer',
        :'created_timestamp' => :'Integer',
        :'paid_timestamp' => :'Integer',
        :'shipped_timestamp' => :'Integer',
        :'quantity' => :'Integer',
        :'listing_image_id' => :'Integer',
        :'receipt_id' => :'Integer',
        :'is_digital' => :'Boolean',
        :'file_data' => :'String',
        :'listing_id' => :'Integer',
        :'transaction_type' => :'String',
        :'product_id' => :'Integer',
        :'sku' => :'String',
        :'price' => :'ShopReceiptTransactionPrice',
        :'shipping_cost' => :'ShopReceiptTransactionShippingCost',
        :'variations' => :'Array<ShopReceiptTransactionVariationsInner>',
        :'product_data' => :'Array<ListingInventoryProductPropertyValuesInner>',
        :'shipping_profile_id' => :'Integer',
        :'min_processing_days' => :'Integer',
        :'max_processing_days' => :'Integer',
        :'shipping_method' => :'String',
        :'shipping_upgrade' => :'String',
        :'expected_ship_date' => :'Integer',
        :'buyer_coupon' => :'Float',
        :'shop_coupon' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'description',
        :'paid_timestamp',
        :'shipped_timestamp',
        :'listing_image_id',
        :'listing_id',
        :'product_id',
        :'sku',
        :'shipping_profile_id',
        :'min_processing_days',
        :'max_processing_days',
        :'shipping_method',
        :'shipping_upgrade',
        :'expected_ship_date',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `EtsyApi::ShopReceiptTransaction` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `EtsyApi::ShopReceiptTransaction`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'transaction_id')
        self.transaction_id = attributes[:'transaction_id']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'seller_user_id')
        self.seller_user_id = attributes[:'seller_user_id']
      end

      if attributes.key?(:'buyer_user_id')
        self.buyer_user_id = attributes[:'buyer_user_id']
      end

      if attributes.key?(:'create_timestamp')
        self.create_timestamp = attributes[:'create_timestamp']
      end

      if attributes.key?(:'created_timestamp')
        self.created_timestamp = attributes[:'created_timestamp']
      end

      if attributes.key?(:'paid_timestamp')
        self.paid_timestamp = attributes[:'paid_timestamp']
      end

      if attributes.key?(:'shipped_timestamp')
        self.shipped_timestamp = attributes[:'shipped_timestamp']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'listing_image_id')
        self.listing_image_id = attributes[:'listing_image_id']
      end

      if attributes.key?(:'receipt_id')
        self.receipt_id = attributes[:'receipt_id']
      end

      if attributes.key?(:'is_digital')
        self.is_digital = attributes[:'is_digital']
      end

      if attributes.key?(:'file_data')
        self.file_data = attributes[:'file_data']
      end

      if attributes.key?(:'listing_id')
        self.listing_id = attributes[:'listing_id']
      end

      if attributes.key?(:'transaction_type')
        self.transaction_type = attributes[:'transaction_type']
      end

      if attributes.key?(:'product_id')
        self.product_id = attributes[:'product_id']
      end

      if attributes.key?(:'sku')
        self.sku = attributes[:'sku']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'shipping_cost')
        self.shipping_cost = attributes[:'shipping_cost']
      end

      if attributes.key?(:'variations')
        if (value = attributes[:'variations']).is_a?(Array)
          self.variations = value
        end
      end

      if attributes.key?(:'product_data')
        if (value = attributes[:'product_data']).is_a?(Array)
          self.product_data = value
        end
      end

      if attributes.key?(:'shipping_profile_id')
        self.shipping_profile_id = attributes[:'shipping_profile_id']
      end

      if attributes.key?(:'min_processing_days')
        self.min_processing_days = attributes[:'min_processing_days']
      end

      if attributes.key?(:'max_processing_days')
        self.max_processing_days = attributes[:'max_processing_days']
      end

      if attributes.key?(:'shipping_method')
        self.shipping_method = attributes[:'shipping_method']
      end

      if attributes.key?(:'shipping_upgrade')
        self.shipping_upgrade = attributes[:'shipping_upgrade']
      end

      if attributes.key?(:'expected_ship_date')
        self.expected_ship_date = attributes[:'expected_ship_date']
      end

      if attributes.key?(:'buyer_coupon')
        self.buyer_coupon = attributes[:'buyer_coupon']
      else
        self.buyer_coupon = 0
      end

      if attributes.key?(:'shop_coupon')
        self.shop_coupon = attributes[:'shop_coupon']
      else
        self.shop_coupon = 0
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@transaction_id.nil? && @transaction_id < 1
        invalid_properties.push('invalid value for "transaction_id", must be greater than or equal to 1.')
      end

      if !@seller_user_id.nil? && @seller_user_id < 1
        invalid_properties.push('invalid value for "seller_user_id", must be greater than or equal to 1.')
      end

      if !@buyer_user_id.nil? && @buyer_user_id < 1
        invalid_properties.push('invalid value for "buyer_user_id", must be greater than or equal to 1.')
      end

      if !@create_timestamp.nil? && @create_timestamp < 946684800
        invalid_properties.push('invalid value for "create_timestamp", must be greater than or equal to 946684800.')
      end

      if !@created_timestamp.nil? && @created_timestamp < 946684800
        invalid_properties.push('invalid value for "created_timestamp", must be greater than or equal to 946684800.')
      end

      if !@paid_timestamp.nil? && @paid_timestamp < 946684800
        invalid_properties.push('invalid value for "paid_timestamp", must be greater than or equal to 946684800.')
      end

      if !@shipped_timestamp.nil? && @shipped_timestamp < 946684800
        invalid_properties.push('invalid value for "shipped_timestamp", must be greater than or equal to 946684800.')
      end

      if !@quantity.nil? && @quantity < 0
        invalid_properties.push('invalid value for "quantity", must be greater than or equal to 0.')
      end

      if !@listing_image_id.nil? && @listing_image_id < 1
        invalid_properties.push('invalid value for "listing_image_id", must be greater than or equal to 1.')
      end

      if !@receipt_id.nil? && @receipt_id < 1
        invalid_properties.push('invalid value for "receipt_id", must be greater than or equal to 1.')
      end

      if !@listing_id.nil? && @listing_id < 0
        invalid_properties.push('invalid value for "listing_id", must be greater than or equal to 0.')
      end

      if !@product_id.nil? && @product_id < 1
        invalid_properties.push('invalid value for "product_id", must be greater than or equal to 1.')
      end

      if !@shipping_profile_id.nil? && @shipping_profile_id < 1
        invalid_properties.push('invalid value for "shipping_profile_id", must be greater than or equal to 1.')
      end

      if !@min_processing_days.nil? && @min_processing_days < 1
        invalid_properties.push('invalid value for "min_processing_days", must be greater than or equal to 1.')
      end

      if !@max_processing_days.nil? && @max_processing_days < 1
        invalid_properties.push('invalid value for "max_processing_days", must be greater than or equal to 1.')
      end

      if !@expected_ship_date.nil? && @expected_ship_date < 946684800
        invalid_properties.push('invalid value for "expected_ship_date", must be greater than or equal to 946684800.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@transaction_id.nil? && @transaction_id < 1
      return false if !@seller_user_id.nil? && @seller_user_id < 1
      return false if !@buyer_user_id.nil? && @buyer_user_id < 1
      return false if !@create_timestamp.nil? && @create_timestamp < 946684800
      return false if !@created_timestamp.nil? && @created_timestamp < 946684800
      return false if !@paid_timestamp.nil? && @paid_timestamp < 946684800
      return false if !@shipped_timestamp.nil? && @shipped_timestamp < 946684800
      return false if !@quantity.nil? && @quantity < 0
      return false if !@listing_image_id.nil? && @listing_image_id < 1
      return false if !@receipt_id.nil? && @receipt_id < 1
      return false if !@listing_id.nil? && @listing_id < 0
      return false if !@product_id.nil? && @product_id < 1
      return false if !@shipping_profile_id.nil? && @shipping_profile_id < 1
      return false if !@min_processing_days.nil? && @min_processing_days < 1
      return false if !@max_processing_days.nil? && @max_processing_days < 1
      return false if !@expected_ship_date.nil? && @expected_ship_date < 946684800
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] transaction_id Value to be assigned
    def transaction_id=(transaction_id)
      if !transaction_id.nil? && transaction_id < 1
        fail ArgumentError, 'invalid value for "transaction_id", must be greater than or equal to 1.'
      end

      @transaction_id = transaction_id
    end

    # Custom attribute writer method with validation
    # @param [Object] seller_user_id Value to be assigned
    def seller_user_id=(seller_user_id)
      if !seller_user_id.nil? && seller_user_id < 1
        fail ArgumentError, 'invalid value for "seller_user_id", must be greater than or equal to 1.'
      end

      @seller_user_id = seller_user_id
    end

    # Custom attribute writer method with validation
    # @param [Object] buyer_user_id Value to be assigned
    def buyer_user_id=(buyer_user_id)
      if !buyer_user_id.nil? && buyer_user_id < 1
        fail ArgumentError, 'invalid value for "buyer_user_id", must be greater than or equal to 1.'
      end

      @buyer_user_id = buyer_user_id
    end

    # Custom attribute writer method with validation
    # @param [Object] create_timestamp Value to be assigned
    def create_timestamp=(create_timestamp)
      if !create_timestamp.nil? && create_timestamp < 946684800
        fail ArgumentError, 'invalid value for "create_timestamp", must be greater than or equal to 946684800.'
      end

      @create_timestamp = create_timestamp
    end

    # Custom attribute writer method with validation
    # @param [Object] created_timestamp Value to be assigned
    def created_timestamp=(created_timestamp)
      if !created_timestamp.nil? && created_timestamp < 946684800
        fail ArgumentError, 'invalid value for "created_timestamp", must be greater than or equal to 946684800.'
      end

      @created_timestamp = created_timestamp
    end

    # Custom attribute writer method with validation
    # @param [Object] paid_timestamp Value to be assigned
    def paid_timestamp=(paid_timestamp)
      if !paid_timestamp.nil? && paid_timestamp < 946684800
        fail ArgumentError, 'invalid value for "paid_timestamp", must be greater than or equal to 946684800.'
      end

      @paid_timestamp = paid_timestamp
    end

    # Custom attribute writer method with validation
    # @param [Object] shipped_timestamp Value to be assigned
    def shipped_timestamp=(shipped_timestamp)
      if !shipped_timestamp.nil? && shipped_timestamp < 946684800
        fail ArgumentError, 'invalid value for "shipped_timestamp", must be greater than or equal to 946684800.'
      end

      @shipped_timestamp = shipped_timestamp
    end

    # Custom attribute writer method with validation
    # @param [Object] quantity Value to be assigned
    def quantity=(quantity)
      if !quantity.nil? && quantity < 0
        fail ArgumentError, 'invalid value for "quantity", must be greater than or equal to 0.'
      end

      @quantity = quantity
    end

    # Custom attribute writer method with validation
    # @param [Object] listing_image_id Value to be assigned
    def listing_image_id=(listing_image_id)
      if !listing_image_id.nil? && listing_image_id < 1
        fail ArgumentError, 'invalid value for "listing_image_id", must be greater than or equal to 1.'
      end

      @listing_image_id = listing_image_id
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_id Value to be assigned
    def receipt_id=(receipt_id)
      if !receipt_id.nil? && receipt_id < 1
        fail ArgumentError, 'invalid value for "receipt_id", must be greater than or equal to 1.'
      end

      @receipt_id = receipt_id
    end

    # Custom attribute writer method with validation
    # @param [Object] listing_id Value to be assigned
    def listing_id=(listing_id)
      if !listing_id.nil? && listing_id < 0
        fail ArgumentError, 'invalid value for "listing_id", must be greater than or equal to 0.'
      end

      @listing_id = listing_id
    end

    # Custom attribute writer method with validation
    # @param [Object] product_id Value to be assigned
    def product_id=(product_id)
      if !product_id.nil? && product_id < 1
        fail ArgumentError, 'invalid value for "product_id", must be greater than or equal to 1.'
      end

      @product_id = product_id
    end

    # Custom attribute writer method with validation
    # @param [Object] shipping_profile_id Value to be assigned
    def shipping_profile_id=(shipping_profile_id)
      if !shipping_profile_id.nil? && shipping_profile_id < 1
        fail ArgumentError, 'invalid value for "shipping_profile_id", must be greater than or equal to 1.'
      end

      @shipping_profile_id = shipping_profile_id
    end

    # Custom attribute writer method with validation
    # @param [Object] min_processing_days Value to be assigned
    def min_processing_days=(min_processing_days)
      if !min_processing_days.nil? && min_processing_days < 1
        fail ArgumentError, 'invalid value for "min_processing_days", must be greater than or equal to 1.'
      end

      @min_processing_days = min_processing_days
    end

    # Custom attribute writer method with validation
    # @param [Object] max_processing_days Value to be assigned
    def max_processing_days=(max_processing_days)
      if !max_processing_days.nil? && max_processing_days < 1
        fail ArgumentError, 'invalid value for "max_processing_days", must be greater than or equal to 1.'
      end

      @max_processing_days = max_processing_days
    end

    # Custom attribute writer method with validation
    # @param [Object] expected_ship_date Value to be assigned
    def expected_ship_date=(expected_ship_date)
      if !expected_ship_date.nil? && expected_ship_date < 946684800
        fail ArgumentError, 'invalid value for "expected_ship_date", must be greater than or equal to 946684800.'
      end

      @expected_ship_date = expected_ship_date
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          transaction_id == o.transaction_id &&
          title == o.title &&
          description == o.description &&
          seller_user_id == o.seller_user_id &&
          buyer_user_id == o.buyer_user_id &&
          create_timestamp == o.create_timestamp &&
          created_timestamp == o.created_timestamp &&
          paid_timestamp == o.paid_timestamp &&
          shipped_timestamp == o.shipped_timestamp &&
          quantity == o.quantity &&
          listing_image_id == o.listing_image_id &&
          receipt_id == o.receipt_id &&
          is_digital == o.is_digital &&
          file_data == o.file_data &&
          listing_id == o.listing_id &&
          transaction_type == o.transaction_type &&
          product_id == o.product_id &&
          sku == o.sku &&
          price == o.price &&
          shipping_cost == o.shipping_cost &&
          variations == o.variations &&
          product_data == o.product_data &&
          shipping_profile_id == o.shipping_profile_id &&
          min_processing_days == o.min_processing_days &&
          max_processing_days == o.max_processing_days &&
          shipping_method == o.shipping_method &&
          shipping_upgrade == o.shipping_upgrade &&
          expected_ship_date == o.expected_ship_date &&
          buyer_coupon == o.buyer_coupon &&
          shop_coupon == o.shop_coupon
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [transaction_id, title, description, seller_user_id, buyer_user_id, create_timestamp, created_timestamp, paid_timestamp, shipped_timestamp, quantity, listing_image_id, receipt_id, is_digital, file_data, listing_id, transaction_type, product_id, sku, price, shipping_cost, variations, product_data, shipping_profile_id, min_processing_days, max_processing_days, shipping_method, shipping_upgrade, expected_ship_date, buyer_coupon, shop_coupon].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = EtsyApi.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
