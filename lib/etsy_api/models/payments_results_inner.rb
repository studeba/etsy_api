=begin
#Etsy Open API v3

#<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/issues/new/choose\">please add an issue in Github</a>.</p></div>&copy; 2021-2022 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

The version of the OpenAPI document: 3.0.0
Contact: developers@etsy.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module EtsyApi
  # A list of payments.
  class PaymentsResultsInner
    # A unique numeric ID for a payment to a specific Etsy [shop](/documentation/reference#tag/Shop).
    attr_accessor :payment_id

    # The numeric ID for the [user](/documentation/reference#tag/User) who paid the purchase.
    attr_accessor :buyer_user_id

    # The unique positive non-zero numeric ID for an Etsy Shop.
    attr_accessor :shop_id

    # The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.
    attr_accessor :receipt_id

    attr_accessor :amount_gross

    attr_accessor :amount_fees

    attr_accessor :amount_net

    attr_accessor :posted_gross

    attr_accessor :posted_fees

    attr_accessor :posted_net

    attr_accessor :adjusted_gross

    attr_accessor :adjusted_fees

    attr_accessor :adjusted_net

    # The ISO (alphabetic) code string for the payment's currency.
    attr_accessor :currency

    # The ISO (alphabetic) code for the shop's currency. The shop displays all prices in this currency by default.
    attr_accessor :shop_currency

    # The currency string of the buyer.
    attr_accessor :buyer_currency

    # The numeric ID of the user to which the seller ships the order.
    attr_accessor :shipping_user_id

    # The numeric id identifying the shipping address.
    attr_accessor :shipping_address_id

    # The numeric ID identifying the billing address of the buyer.
    attr_accessor :billing_address_id

    # A string indicating the current status of the payment, most commonly \"settled\" or \"authed\".
    attr_accessor :status

    # The transaction\\'s shipping date and time, in epoch seconds.
    attr_accessor :shipped_timestamp

    # The transaction\\'s creation date and time, in epoch seconds.
    attr_accessor :create_timestamp

    # The transaction\\'s creation date and time, in epoch seconds.
    attr_accessor :created_timestamp

    # The date and time of the last change to the payment adjustment in epoch seconds.
    attr_accessor :update_timestamp

    # The date and time of the last change to the payment adjustment in epoch seconds.
    attr_accessor :updated_timestamp

    # List of refund objects on an Etsy Payments transaction. All monetary amounts are in USD pennies unless otherwise specified.
    attr_accessor :payment_adjustments

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'payment_id' => :'payment_id',
        :'buyer_user_id' => :'buyer_user_id',
        :'shop_id' => :'shop_id',
        :'receipt_id' => :'receipt_id',
        :'amount_gross' => :'amount_gross',
        :'amount_fees' => :'amount_fees',
        :'amount_net' => :'amount_net',
        :'posted_gross' => :'posted_gross',
        :'posted_fees' => :'posted_fees',
        :'posted_net' => :'posted_net',
        :'adjusted_gross' => :'adjusted_gross',
        :'adjusted_fees' => :'adjusted_fees',
        :'adjusted_net' => :'adjusted_net',
        :'currency' => :'currency',
        :'shop_currency' => :'shop_currency',
        :'buyer_currency' => :'buyer_currency',
        :'shipping_user_id' => :'shipping_user_id',
        :'shipping_address_id' => :'shipping_address_id',
        :'billing_address_id' => :'billing_address_id',
        :'status' => :'status',
        :'shipped_timestamp' => :'shipped_timestamp',
        :'create_timestamp' => :'create_timestamp',
        :'created_timestamp' => :'created_timestamp',
        :'update_timestamp' => :'update_timestamp',
        :'updated_timestamp' => :'updated_timestamp',
        :'payment_adjustments' => :'payment_adjustments'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'payment_id' => :'Integer',
        :'buyer_user_id' => :'Integer',
        :'shop_id' => :'Integer',
        :'receipt_id' => :'Integer',
        :'amount_gross' => :'PaymentAmountGross',
        :'amount_fees' => :'PaymentAmountFees',
        :'amount_net' => :'PaymentAmountNet',
        :'posted_gross' => :'PaymentPostedGross',
        :'posted_fees' => :'PaymentPostedFees',
        :'posted_net' => :'PaymentPostedNet',
        :'adjusted_gross' => :'PaymentAdjustedGross',
        :'adjusted_fees' => :'PaymentAdjustedFees',
        :'adjusted_net' => :'PaymentAdjustedNet',
        :'currency' => :'String',
        :'shop_currency' => :'String',
        :'buyer_currency' => :'String',
        :'shipping_user_id' => :'Integer',
        :'shipping_address_id' => :'Integer',
        :'billing_address_id' => :'Integer',
        :'status' => :'String',
        :'shipped_timestamp' => :'Integer',
        :'create_timestamp' => :'Integer',
        :'created_timestamp' => :'Integer',
        :'update_timestamp' => :'Integer',
        :'updated_timestamp' => :'Integer',
        :'payment_adjustments' => :'Array<PaymentAccountLedgerEntryPaymentAdjustmentsInner>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'shop_currency',
        :'buyer_currency',
        :'shipping_user_id',
        :'shipped_timestamp',
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'Payment'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `EtsyApi::PaymentsResultsInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `EtsyApi::PaymentsResultsInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'payment_id')
        self.payment_id = attributes[:'payment_id']
      end

      if attributes.key?(:'buyer_user_id')
        self.buyer_user_id = attributes[:'buyer_user_id']
      end

      if attributes.key?(:'shop_id')
        self.shop_id = attributes[:'shop_id']
      end

      if attributes.key?(:'receipt_id')
        self.receipt_id = attributes[:'receipt_id']
      end

      if attributes.key?(:'amount_gross')
        self.amount_gross = attributes[:'amount_gross']
      end

      if attributes.key?(:'amount_fees')
        self.amount_fees = attributes[:'amount_fees']
      end

      if attributes.key?(:'amount_net')
        self.amount_net = attributes[:'amount_net']
      end

      if attributes.key?(:'posted_gross')
        self.posted_gross = attributes[:'posted_gross']
      end

      if attributes.key?(:'posted_fees')
        self.posted_fees = attributes[:'posted_fees']
      end

      if attributes.key?(:'posted_net')
        self.posted_net = attributes[:'posted_net']
      end

      if attributes.key?(:'adjusted_gross')
        self.adjusted_gross = attributes[:'adjusted_gross']
      end

      if attributes.key?(:'adjusted_fees')
        self.adjusted_fees = attributes[:'adjusted_fees']
      end

      if attributes.key?(:'adjusted_net')
        self.adjusted_net = attributes[:'adjusted_net']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'shop_currency')
        self.shop_currency = attributes[:'shop_currency']
      end

      if attributes.key?(:'buyer_currency')
        self.buyer_currency = attributes[:'buyer_currency']
      end

      if attributes.key?(:'shipping_user_id')
        self.shipping_user_id = attributes[:'shipping_user_id']
      end

      if attributes.key?(:'shipping_address_id')
        self.shipping_address_id = attributes[:'shipping_address_id']
      end

      if attributes.key?(:'billing_address_id')
        self.billing_address_id = attributes[:'billing_address_id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'shipped_timestamp')
        self.shipped_timestamp = attributes[:'shipped_timestamp']
      end

      if attributes.key?(:'create_timestamp')
        self.create_timestamp = attributes[:'create_timestamp']
      end

      if attributes.key?(:'created_timestamp')
        self.created_timestamp = attributes[:'created_timestamp']
      end

      if attributes.key?(:'update_timestamp')
        self.update_timestamp = attributes[:'update_timestamp']
      end

      if attributes.key?(:'updated_timestamp')
        self.updated_timestamp = attributes[:'updated_timestamp']
      end

      if attributes.key?(:'payment_adjustments')
        if (value = attributes[:'payment_adjustments']).is_a?(Array)
          self.payment_adjustments = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@payment_id.nil? && @payment_id < 1
        invalid_properties.push('invalid value for "payment_id", must be greater than or equal to 1.')
      end

      if !@buyer_user_id.nil? && @buyer_user_id < 1
        invalid_properties.push('invalid value for "buyer_user_id", must be greater than or equal to 1.')
      end

      if !@shop_id.nil? && @shop_id < 1
        invalid_properties.push('invalid value for "shop_id", must be greater than or equal to 1.')
      end

      if !@receipt_id.nil? && @receipt_id < 1
        invalid_properties.push('invalid value for "receipt_id", must be greater than or equal to 1.')
      end

      if !@shipping_user_id.nil? && @shipping_user_id < 1
        invalid_properties.push('invalid value for "shipping_user_id", must be greater than or equal to 1.')
      end

      if !@shipping_address_id.nil? && @shipping_address_id < 1
        invalid_properties.push('invalid value for "shipping_address_id", must be greater than or equal to 1.')
      end

      if !@billing_address_id.nil? && @billing_address_id > 9223372036854775807
        invalid_properties.push('invalid value for "billing_address_id", must be smaller than or equal to 9223372036854775807.')
      end

      if !@billing_address_id.nil? && @billing_address_id < 0
        invalid_properties.push('invalid value for "billing_address_id", must be greater than or equal to 0.')
      end

      if !@shipped_timestamp.nil? && @shipped_timestamp < 946684800
        invalid_properties.push('invalid value for "shipped_timestamp", must be greater than or equal to 946684800.')
      end

      if !@create_timestamp.nil? && @create_timestamp < 946684800
        invalid_properties.push('invalid value for "create_timestamp", must be greater than or equal to 946684800.')
      end

      if !@created_timestamp.nil? && @created_timestamp < 946684800
        invalid_properties.push('invalid value for "created_timestamp", must be greater than or equal to 946684800.')
      end

      if !@update_timestamp.nil? && @update_timestamp < 946684800
        invalid_properties.push('invalid value for "update_timestamp", must be greater than or equal to 946684800.')
      end

      if !@updated_timestamp.nil? && @updated_timestamp < 946684800
        invalid_properties.push('invalid value for "updated_timestamp", must be greater than or equal to 946684800.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@payment_id.nil? && @payment_id < 1
      return false if !@buyer_user_id.nil? && @buyer_user_id < 1
      return false if !@shop_id.nil? && @shop_id < 1
      return false if !@receipt_id.nil? && @receipt_id < 1
      return false if !@shipping_user_id.nil? && @shipping_user_id < 1
      return false if !@shipping_address_id.nil? && @shipping_address_id < 1
      return false if !@billing_address_id.nil? && @billing_address_id > 9223372036854775807
      return false if !@billing_address_id.nil? && @billing_address_id < 0
      return false if !@shipped_timestamp.nil? && @shipped_timestamp < 946684800
      return false if !@create_timestamp.nil? && @create_timestamp < 946684800
      return false if !@created_timestamp.nil? && @created_timestamp < 946684800
      return false if !@update_timestamp.nil? && @update_timestamp < 946684800
      return false if !@updated_timestamp.nil? && @updated_timestamp < 946684800
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_id Value to be assigned
    def payment_id=(payment_id)
      if !payment_id.nil? && payment_id < 1
        fail ArgumentError, 'invalid value for "payment_id", must be greater than or equal to 1.'
      end

      @payment_id = payment_id
    end

    # Custom attribute writer method with validation
    # @param [Object] buyer_user_id Value to be assigned
    def buyer_user_id=(buyer_user_id)
      if !buyer_user_id.nil? && buyer_user_id < 1
        fail ArgumentError, 'invalid value for "buyer_user_id", must be greater than or equal to 1.'
      end

      @buyer_user_id = buyer_user_id
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_id Value to be assigned
    def shop_id=(shop_id)
      if !shop_id.nil? && shop_id < 1
        fail ArgumentError, 'invalid value for "shop_id", must be greater than or equal to 1.'
      end

      @shop_id = shop_id
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_id Value to be assigned
    def receipt_id=(receipt_id)
      if !receipt_id.nil? && receipt_id < 1
        fail ArgumentError, 'invalid value for "receipt_id", must be greater than or equal to 1.'
      end

      @receipt_id = receipt_id
    end

    # Custom attribute writer method with validation
    # @param [Object] shipping_user_id Value to be assigned
    def shipping_user_id=(shipping_user_id)
      if !shipping_user_id.nil? && shipping_user_id < 1
        fail ArgumentError, 'invalid value for "shipping_user_id", must be greater than or equal to 1.'
      end

      @shipping_user_id = shipping_user_id
    end

    # Custom attribute writer method with validation
    # @param [Object] shipping_address_id Value to be assigned
    def shipping_address_id=(shipping_address_id)
      if !shipping_address_id.nil? && shipping_address_id < 1
        fail ArgumentError, 'invalid value for "shipping_address_id", must be greater than or equal to 1.'
      end

      @shipping_address_id = shipping_address_id
    end

    # Custom attribute writer method with validation
    # @param [Object] billing_address_id Value to be assigned
    def billing_address_id=(billing_address_id)
      if !billing_address_id.nil? && billing_address_id > 9223372036854775807
        fail ArgumentError, 'invalid value for "billing_address_id", must be smaller than or equal to 9223372036854775807.'
      end

      if !billing_address_id.nil? && billing_address_id < 0
        fail ArgumentError, 'invalid value for "billing_address_id", must be greater than or equal to 0.'
      end

      @billing_address_id = billing_address_id
    end

    # Custom attribute writer method with validation
    # @param [Object] shipped_timestamp Value to be assigned
    def shipped_timestamp=(shipped_timestamp)
      if !shipped_timestamp.nil? && shipped_timestamp < 946684800
        fail ArgumentError, 'invalid value for "shipped_timestamp", must be greater than or equal to 946684800.'
      end

      @shipped_timestamp = shipped_timestamp
    end

    # Custom attribute writer method with validation
    # @param [Object] create_timestamp Value to be assigned
    def create_timestamp=(create_timestamp)
      if !create_timestamp.nil? && create_timestamp < 946684800
        fail ArgumentError, 'invalid value for "create_timestamp", must be greater than or equal to 946684800.'
      end

      @create_timestamp = create_timestamp
    end

    # Custom attribute writer method with validation
    # @param [Object] created_timestamp Value to be assigned
    def created_timestamp=(created_timestamp)
      if !created_timestamp.nil? && created_timestamp < 946684800
        fail ArgumentError, 'invalid value for "created_timestamp", must be greater than or equal to 946684800.'
      end

      @created_timestamp = created_timestamp
    end

    # Custom attribute writer method with validation
    # @param [Object] update_timestamp Value to be assigned
    def update_timestamp=(update_timestamp)
      if !update_timestamp.nil? && update_timestamp < 946684800
        fail ArgumentError, 'invalid value for "update_timestamp", must be greater than or equal to 946684800.'
      end

      @update_timestamp = update_timestamp
    end

    # Custom attribute writer method with validation
    # @param [Object] updated_timestamp Value to be assigned
    def updated_timestamp=(updated_timestamp)
      if !updated_timestamp.nil? && updated_timestamp < 946684800
        fail ArgumentError, 'invalid value for "updated_timestamp", must be greater than or equal to 946684800.'
      end

      @updated_timestamp = updated_timestamp
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          payment_id == o.payment_id &&
          buyer_user_id == o.buyer_user_id &&
          shop_id == o.shop_id &&
          receipt_id == o.receipt_id &&
          amount_gross == o.amount_gross &&
          amount_fees == o.amount_fees &&
          amount_net == o.amount_net &&
          posted_gross == o.posted_gross &&
          posted_fees == o.posted_fees &&
          posted_net == o.posted_net &&
          adjusted_gross == o.adjusted_gross &&
          adjusted_fees == o.adjusted_fees &&
          adjusted_net == o.adjusted_net &&
          currency == o.currency &&
          shop_currency == o.shop_currency &&
          buyer_currency == o.buyer_currency &&
          shipping_user_id == o.shipping_user_id &&
          shipping_address_id == o.shipping_address_id &&
          billing_address_id == o.billing_address_id &&
          status == o.status &&
          shipped_timestamp == o.shipped_timestamp &&
          create_timestamp == o.create_timestamp &&
          created_timestamp == o.created_timestamp &&
          update_timestamp == o.update_timestamp &&
          updated_timestamp == o.updated_timestamp &&
          payment_adjustments == o.payment_adjustments
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [payment_id, buyer_user_id, shop_id, receipt_id, amount_gross, amount_fees, amount_net, posted_gross, posted_fees, posted_net, adjusted_gross, adjusted_fees, adjusted_net, currency, shop_currency, buyer_currency, shipping_user_id, shipping_address_id, billing_address_id, status, shipped_timestamp, create_timestamp, created_timestamp, update_timestamp, updated_timestamp, payment_adjustments].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = EtsyApi.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
